# source: http://192.168.99.100:4466
# timestamp: Sat Apr 11 2020 09:45:25 GMT-0700 (Mountain Standard Time)

type AggregateComment {
  count: Int!
}

type AggregateCustomIngredient {
  count: Int!
}

type AggregateCustomRecipe {
  count: Int!
}

type AggregateDailyRecord {
  count: Int!
}

type AggregateFavoriteFood {
  count: Int!
}

type AggregateIngredientList {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateProfile {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWeightLog {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Comment implements Node {
  id: ID!
  user: User!
  user_id: String!
  post: Post!
  likeCount: Int!
  body: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  user_id: String!
  likeCount: Int!
  body: String!
  user: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutPostInput {
  id: ID
  user_id: String!
  likeCount: Int!
  body: String!
  user: UserCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutUserInput {
  id: ID
  user_id: String!
  likeCount: Int!
  body: String!
  post: PostCreateOneWithoutCommentsInput!
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  user_id_ASC
  user_id_DESC
  likeCount_ASC
  likeCount_DESC
  body_ASC
  body_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommentPreviousValues {
  id: ID!
  user_id: String!
  likeCount: Int!
  body: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input CommentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  likeCount: Int

  """All values that are not equal to given value."""
  likeCount_not: Int

  """All values that are contained in given list."""
  likeCount_in: [Int!]

  """All values that are not contained in given list."""
  likeCount_not_in: [Int!]

  """All values less than the given value."""
  likeCount_lt: Int

  """All values less than or equal the given value."""
  likeCount_lte: Int

  """All values greater than the given value."""
  likeCount_gt: Int

  """All values greater than or equal the given value."""
  likeCount_gte: Int
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateInput {
  user_id: String
  likeCount: Int
  body: String
  user: UserUpdateOneRequiredWithoutCommentsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  user_id: String
  likeCount: Int
  body: String
}

input CommentUpdateManyMutationInput {
  user_id: String
  likeCount: Int
  body: String
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutPostDataInput {
  user_id: String
  likeCount: Int
  body: String
  user: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutUserDataInput {
  user_id: String
  likeCount: Int
  body: String
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutUserDataInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutUserDataInput!
  create: CommentCreateWithoutUserInput!
}

input CommentWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  likeCount: Int

  """All values that are not equal to given value."""
  likeCount_not: Int

  """All values that are contained in given list."""
  likeCount_in: [Int!]

  """All values that are not contained in given list."""
  likeCount_not_in: [Int!]

  """All values less than the given value."""
  likeCount_lt: Int

  """All values less than or equal the given value."""
  likeCount_lte: Int

  """All values greater than the given value."""
  likeCount_gt: Int

  """All values greater than or equal the given value."""
  likeCount_gte: Int
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  user: UserWhereInput
  post: PostWhereInput
}

input CommentWhereUniqueInput {
  id: ID
}

type CustomIngredient implements Node {
  id: ID!
  user_id: String!
  name: String!
  description: String!
  fat: Int!
  carbs: Int!
  protein: Int!
  fiber: Int!
  calories: Int!
  user: User!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type CustomIngredientConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CustomIngredientEdge]!
  aggregate: AggregateCustomIngredient!
}

input CustomIngredientCreateInput {
  id: ID
  user_id: String!
  name: String!
  description: String!
  fat: Int!
  carbs: Int!
  protein: Int!
  fiber: Int!
  calories: Int!
  user: UserCreateOneWithoutCustom_ingredientsInput!
}

input CustomIngredientCreateManyWithoutUserInput {
  create: [CustomIngredientCreateWithoutUserInput!]
  connect: [CustomIngredientWhereUniqueInput!]
}

input CustomIngredientCreateWithoutUserInput {
  id: ID
  user_id: String!
  name: String!
  description: String!
  fat: Int!
  carbs: Int!
  protein: Int!
  fiber: Int!
  calories: Int!
}

"""An edge in a connection."""
type CustomIngredientEdge {
  """The item at the end of the edge."""
  node: CustomIngredient!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CustomIngredientOrderByInput {
  id_ASC
  id_DESC
  user_id_ASC
  user_id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  fat_ASC
  fat_DESC
  carbs_ASC
  carbs_DESC
  protein_ASC
  protein_DESC
  fiber_ASC
  fiber_DESC
  calories_ASC
  calories_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CustomIngredientPreviousValues {
  id: ID!
  user_id: String!
  name: String!
  description: String!
  fat: Int!
  carbs: Int!
  protein: Int!
  fiber: Int!
  calories: Int!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input CustomIngredientScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomIngredientScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomIngredientScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomIngredientScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  fat: Int

  """All values that are not equal to given value."""
  fat_not: Int

  """All values that are contained in given list."""
  fat_in: [Int!]

  """All values that are not contained in given list."""
  fat_not_in: [Int!]

  """All values less than the given value."""
  fat_lt: Int

  """All values less than or equal the given value."""
  fat_lte: Int

  """All values greater than the given value."""
  fat_gt: Int

  """All values greater than or equal the given value."""
  fat_gte: Int
  carbs: Int

  """All values that are not equal to given value."""
  carbs_not: Int

  """All values that are contained in given list."""
  carbs_in: [Int!]

  """All values that are not contained in given list."""
  carbs_not_in: [Int!]

  """All values less than the given value."""
  carbs_lt: Int

  """All values less than or equal the given value."""
  carbs_lte: Int

  """All values greater than the given value."""
  carbs_gt: Int

  """All values greater than or equal the given value."""
  carbs_gte: Int
  protein: Int

  """All values that are not equal to given value."""
  protein_not: Int

  """All values that are contained in given list."""
  protein_in: [Int!]

  """All values that are not contained in given list."""
  protein_not_in: [Int!]

  """All values less than the given value."""
  protein_lt: Int

  """All values less than or equal the given value."""
  protein_lte: Int

  """All values greater than the given value."""
  protein_gt: Int

  """All values greater than or equal the given value."""
  protein_gte: Int
  fiber: Int

  """All values that are not equal to given value."""
  fiber_not: Int

  """All values that are contained in given list."""
  fiber_in: [Int!]

  """All values that are not contained in given list."""
  fiber_not_in: [Int!]

  """All values less than the given value."""
  fiber_lt: Int

  """All values less than or equal the given value."""
  fiber_lte: Int

  """All values greater than the given value."""
  fiber_gt: Int

  """All values greater than or equal the given value."""
  fiber_gte: Int
  calories: Int

  """All values that are not equal to given value."""
  calories_not: Int

  """All values that are contained in given list."""
  calories_in: [Int!]

  """All values that are not contained in given list."""
  calories_not_in: [Int!]

  """All values less than the given value."""
  calories_lt: Int

  """All values less than or equal the given value."""
  calories_lte: Int

  """All values greater than the given value."""
  calories_gt: Int

  """All values greater than or equal the given value."""
  calories_gte: Int
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type CustomIngredientSubscriptionPayload {
  mutation: MutationType!
  node: CustomIngredient
  updatedFields: [String!]
  previousValues: CustomIngredientPreviousValues
}

input CustomIngredientSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomIngredientSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomIngredientSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomIngredientSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CustomIngredientWhereInput
}

input CustomIngredientUpdateInput {
  user_id: String
  name: String
  description: String
  fat: Int
  carbs: Int
  protein: Int
  fiber: Int
  calories: Int
  user: UserUpdateOneRequiredWithoutCustom_ingredientsInput
}

input CustomIngredientUpdateManyDataInput {
  user_id: String
  name: String
  description: String
  fat: Int
  carbs: Int
  protein: Int
  fiber: Int
  calories: Int
}

input CustomIngredientUpdateManyMutationInput {
  user_id: String
  name: String
  description: String
  fat: Int
  carbs: Int
  protein: Int
  fiber: Int
  calories: Int
}

input CustomIngredientUpdateManyWithoutUserInput {
  create: [CustomIngredientCreateWithoutUserInput!]
  connect: [CustomIngredientWhereUniqueInput!]
  set: [CustomIngredientWhereUniqueInput!]
  disconnect: [CustomIngredientWhereUniqueInput!]
  delete: [CustomIngredientWhereUniqueInput!]
  update: [CustomIngredientUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CustomIngredientUpdateManyWithWhereNestedInput!]
  deleteMany: [CustomIngredientScalarWhereInput!]
  upsert: [CustomIngredientUpsertWithWhereUniqueWithoutUserInput!]
}

input CustomIngredientUpdateManyWithWhereNestedInput {
  where: CustomIngredientScalarWhereInput!
  data: CustomIngredientUpdateManyDataInput!
}

input CustomIngredientUpdateWithoutUserDataInput {
  user_id: String
  name: String
  description: String
  fat: Int
  carbs: Int
  protein: Int
  fiber: Int
  calories: Int
}

input CustomIngredientUpdateWithWhereUniqueWithoutUserInput {
  where: CustomIngredientWhereUniqueInput!
  data: CustomIngredientUpdateWithoutUserDataInput!
}

input CustomIngredientUpsertWithWhereUniqueWithoutUserInput {
  where: CustomIngredientWhereUniqueInput!
  update: CustomIngredientUpdateWithoutUserDataInput!
  create: CustomIngredientCreateWithoutUserInput!
}

input CustomIngredientWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomIngredientWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomIngredientWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomIngredientWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  fat: Int

  """All values that are not equal to given value."""
  fat_not: Int

  """All values that are contained in given list."""
  fat_in: [Int!]

  """All values that are not contained in given list."""
  fat_not_in: [Int!]

  """All values less than the given value."""
  fat_lt: Int

  """All values less than or equal the given value."""
  fat_lte: Int

  """All values greater than the given value."""
  fat_gt: Int

  """All values greater than or equal the given value."""
  fat_gte: Int
  carbs: Int

  """All values that are not equal to given value."""
  carbs_not: Int

  """All values that are contained in given list."""
  carbs_in: [Int!]

  """All values that are not contained in given list."""
  carbs_not_in: [Int!]

  """All values less than the given value."""
  carbs_lt: Int

  """All values less than or equal the given value."""
  carbs_lte: Int

  """All values greater than the given value."""
  carbs_gt: Int

  """All values greater than or equal the given value."""
  carbs_gte: Int
  protein: Int

  """All values that are not equal to given value."""
  protein_not: Int

  """All values that are contained in given list."""
  protein_in: [Int!]

  """All values that are not contained in given list."""
  protein_not_in: [Int!]

  """All values less than the given value."""
  protein_lt: Int

  """All values less than or equal the given value."""
  protein_lte: Int

  """All values greater than the given value."""
  protein_gt: Int

  """All values greater than or equal the given value."""
  protein_gte: Int
  fiber: Int

  """All values that are not equal to given value."""
  fiber_not: Int

  """All values that are contained in given list."""
  fiber_in: [Int!]

  """All values that are not contained in given list."""
  fiber_not_in: [Int!]

  """All values less than the given value."""
  fiber_lt: Int

  """All values less than or equal the given value."""
  fiber_lte: Int

  """All values greater than the given value."""
  fiber_gt: Int

  """All values greater than or equal the given value."""
  fiber_gte: Int
  calories: Int

  """All values that are not equal to given value."""
  calories_not: Int

  """All values that are contained in given list."""
  calories_in: [Int!]

  """All values that are not contained in given list."""
  calories_not_in: [Int!]

  """All values less than the given value."""
  calories_lt: Int

  """All values less than or equal the given value."""
  calories_lte: Int

  """All values greater than the given value."""
  calories_gt: Int

  """All values greater than or equal the given value."""
  calories_gte: Int
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  user: UserWhereInput
}

input CustomIngredientWhereUniqueInput {
  id: ID
}

type CustomRecipe implements Node {
  id: ID!
  name: String!
  user_id: String!
  portions: Int!
  user: User!
  ingredient_list(where: IngredientListWhereInput, orderBy: IngredientListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [IngredientList!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type CustomRecipeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CustomRecipeEdge]!
  aggregate: AggregateCustomRecipe!
}

input CustomRecipeCreateInput {
  id: ID
  name: String!
  user_id: String!
  portions: Int!
  user: UserCreateOneWithoutCustom_recipesInput!
  ingredient_list: IngredientListCreateManyWithoutRecipeInput
}

input CustomRecipeCreateManyWithoutUserInput {
  create: [CustomRecipeCreateWithoutUserInput!]
  connect: [CustomRecipeWhereUniqueInput!]
}

input CustomRecipeCreateOneWithoutIngredient_listInput {
  create: CustomRecipeCreateWithoutIngredient_listInput
  connect: CustomRecipeWhereUniqueInput
}

input CustomRecipeCreateWithoutIngredient_listInput {
  id: ID
  name: String!
  user_id: String!
  portions: Int!
  user: UserCreateOneWithoutCustom_recipesInput!
}

input CustomRecipeCreateWithoutUserInput {
  id: ID
  name: String!
  user_id: String!
  portions: Int!
  ingredient_list: IngredientListCreateManyWithoutRecipeInput
}

"""An edge in a connection."""
type CustomRecipeEdge {
  """The item at the end of the edge."""
  node: CustomRecipe!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CustomRecipeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  user_id_ASC
  user_id_DESC
  portions_ASC
  portions_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CustomRecipePreviousValues {
  id: ID!
  name: String!
  user_id: String!
  portions: Int!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input CustomRecipeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomRecipeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomRecipeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomRecipeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  portions: Int

  """All values that are not equal to given value."""
  portions_not: Int

  """All values that are contained in given list."""
  portions_in: [Int!]

  """All values that are not contained in given list."""
  portions_not_in: [Int!]

  """All values less than the given value."""
  portions_lt: Int

  """All values less than or equal the given value."""
  portions_lte: Int

  """All values greater than the given value."""
  portions_gt: Int

  """All values greater than or equal the given value."""
  portions_gte: Int
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type CustomRecipeSubscriptionPayload {
  mutation: MutationType!
  node: CustomRecipe
  updatedFields: [String!]
  previousValues: CustomRecipePreviousValues
}

input CustomRecipeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomRecipeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomRecipeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomRecipeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CustomRecipeWhereInput
}

input CustomRecipeUpdateInput {
  name: String
  user_id: String
  portions: Int
  user: UserUpdateOneRequiredWithoutCustom_recipesInput
  ingredient_list: IngredientListUpdateManyWithoutRecipeInput
}

input CustomRecipeUpdateManyDataInput {
  name: String
  user_id: String
  portions: Int
}

input CustomRecipeUpdateManyMutationInput {
  name: String
  user_id: String
  portions: Int
}

input CustomRecipeUpdateManyWithoutUserInput {
  create: [CustomRecipeCreateWithoutUserInput!]
  connect: [CustomRecipeWhereUniqueInput!]
  set: [CustomRecipeWhereUniqueInput!]
  disconnect: [CustomRecipeWhereUniqueInput!]
  delete: [CustomRecipeWhereUniqueInput!]
  update: [CustomRecipeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CustomRecipeUpdateManyWithWhereNestedInput!]
  deleteMany: [CustomRecipeScalarWhereInput!]
  upsert: [CustomRecipeUpsertWithWhereUniqueWithoutUserInput!]
}

input CustomRecipeUpdateManyWithWhereNestedInput {
  where: CustomRecipeScalarWhereInput!
  data: CustomRecipeUpdateManyDataInput!
}

input CustomRecipeUpdateOneRequiredWithoutIngredient_listInput {
  create: CustomRecipeCreateWithoutIngredient_listInput
  connect: CustomRecipeWhereUniqueInput
  update: CustomRecipeUpdateWithoutIngredient_listDataInput
  upsert: CustomRecipeUpsertWithoutIngredient_listInput
}

input CustomRecipeUpdateWithoutIngredient_listDataInput {
  name: String
  user_id: String
  portions: Int
  user: UserUpdateOneRequiredWithoutCustom_recipesInput
}

input CustomRecipeUpdateWithoutUserDataInput {
  name: String
  user_id: String
  portions: Int
  ingredient_list: IngredientListUpdateManyWithoutRecipeInput
}

input CustomRecipeUpdateWithWhereUniqueWithoutUserInput {
  where: CustomRecipeWhereUniqueInput!
  data: CustomRecipeUpdateWithoutUserDataInput!
}

input CustomRecipeUpsertWithoutIngredient_listInput {
  update: CustomRecipeUpdateWithoutIngredient_listDataInput!
  create: CustomRecipeCreateWithoutIngredient_listInput!
}

input CustomRecipeUpsertWithWhereUniqueWithoutUserInput {
  where: CustomRecipeWhereUniqueInput!
  update: CustomRecipeUpdateWithoutUserDataInput!
  create: CustomRecipeCreateWithoutUserInput!
}

input CustomRecipeWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomRecipeWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomRecipeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomRecipeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  portions: Int

  """All values that are not equal to given value."""
  portions_not: Int

  """All values that are contained in given list."""
  portions_in: [Int!]

  """All values that are not contained in given list."""
  portions_not_in: [Int!]

  """All values less than the given value."""
  portions_lt: Int

  """All values less than or equal the given value."""
  portions_lte: Int

  """All values greater than the given value."""
  portions_gt: Int

  """All values greater than or equal the given value."""
  portions_gte: Int
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  user: UserWhereInput
  ingredient_list_every: IngredientListWhereInput
  ingredient_list_some: IngredientListWhereInput
  ingredient_list_none: IngredientListWhereInput
}

input CustomRecipeWhereUniqueInput {
  id: ID
}

type DailyRecord implements Node {
  id: ID!
  user_id: String!
  date: String!
  calories: Int!
  fat: Int!
  carbs: Int!
  fiber: Int!
  protein: Int!
  food_string: String!
  meal_type: String!
  user: User!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type DailyRecordConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DailyRecordEdge]!
  aggregate: AggregateDailyRecord!
}

input DailyRecordCreateInput {
  id: ID
  user_id: String!
  date: String!
  calories: Int!
  fat: Int!
  carbs: Int!
  fiber: Int!
  protein: Int!
  food_string: String!
  meal_type: String!
  user: UserCreateOneWithoutDaily_recordsInput!
}

input DailyRecordCreateManyWithoutUserInput {
  create: [DailyRecordCreateWithoutUserInput!]
  connect: [DailyRecordWhereUniqueInput!]
}

input DailyRecordCreateWithoutUserInput {
  id: ID
  user_id: String!
  date: String!
  calories: Int!
  fat: Int!
  carbs: Int!
  fiber: Int!
  protein: Int!
  food_string: String!
  meal_type: String!
}

"""An edge in a connection."""
type DailyRecordEdge {
  """The item at the end of the edge."""
  node: DailyRecord!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DailyRecordOrderByInput {
  id_ASC
  id_DESC
  user_id_ASC
  user_id_DESC
  date_ASC
  date_DESC
  calories_ASC
  calories_DESC
  fat_ASC
  fat_DESC
  carbs_ASC
  carbs_DESC
  fiber_ASC
  fiber_DESC
  protein_ASC
  protein_DESC
  food_string_ASC
  food_string_DESC
  meal_type_ASC
  meal_type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DailyRecordPreviousValues {
  id: ID!
  user_id: String!
  date: String!
  calories: Int!
  fat: Int!
  carbs: Int!
  fiber: Int!
  protein: Int!
  food_string: String!
  meal_type: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input DailyRecordScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DailyRecordScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DailyRecordScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DailyRecordScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  date: String

  """All values that are not equal to given value."""
  date_not: String

  """All values that are contained in given list."""
  date_in: [String!]

  """All values that are not contained in given list."""
  date_not_in: [String!]

  """All values less than the given value."""
  date_lt: String

  """All values less than or equal the given value."""
  date_lte: String

  """All values greater than the given value."""
  date_gt: String

  """All values greater than or equal the given value."""
  date_gte: String

  """All values containing the given string."""
  date_contains: String

  """All values not containing the given string."""
  date_not_contains: String

  """All values starting with the given string."""
  date_starts_with: String

  """All values not starting with the given string."""
  date_not_starts_with: String

  """All values ending with the given string."""
  date_ends_with: String

  """All values not ending with the given string."""
  date_not_ends_with: String
  calories: Int

  """All values that are not equal to given value."""
  calories_not: Int

  """All values that are contained in given list."""
  calories_in: [Int!]

  """All values that are not contained in given list."""
  calories_not_in: [Int!]

  """All values less than the given value."""
  calories_lt: Int

  """All values less than or equal the given value."""
  calories_lte: Int

  """All values greater than the given value."""
  calories_gt: Int

  """All values greater than or equal the given value."""
  calories_gte: Int
  fat: Int

  """All values that are not equal to given value."""
  fat_not: Int

  """All values that are contained in given list."""
  fat_in: [Int!]

  """All values that are not contained in given list."""
  fat_not_in: [Int!]

  """All values less than the given value."""
  fat_lt: Int

  """All values less than or equal the given value."""
  fat_lte: Int

  """All values greater than the given value."""
  fat_gt: Int

  """All values greater than or equal the given value."""
  fat_gte: Int
  carbs: Int

  """All values that are not equal to given value."""
  carbs_not: Int

  """All values that are contained in given list."""
  carbs_in: [Int!]

  """All values that are not contained in given list."""
  carbs_not_in: [Int!]

  """All values less than the given value."""
  carbs_lt: Int

  """All values less than or equal the given value."""
  carbs_lte: Int

  """All values greater than the given value."""
  carbs_gt: Int

  """All values greater than or equal the given value."""
  carbs_gte: Int
  fiber: Int

  """All values that are not equal to given value."""
  fiber_not: Int

  """All values that are contained in given list."""
  fiber_in: [Int!]

  """All values that are not contained in given list."""
  fiber_not_in: [Int!]

  """All values less than the given value."""
  fiber_lt: Int

  """All values less than or equal the given value."""
  fiber_lte: Int

  """All values greater than the given value."""
  fiber_gt: Int

  """All values greater than or equal the given value."""
  fiber_gte: Int
  protein: Int

  """All values that are not equal to given value."""
  protein_not: Int

  """All values that are contained in given list."""
  protein_in: [Int!]

  """All values that are not contained in given list."""
  protein_not_in: [Int!]

  """All values less than the given value."""
  protein_lt: Int

  """All values less than or equal the given value."""
  protein_lte: Int

  """All values greater than the given value."""
  protein_gt: Int

  """All values greater than or equal the given value."""
  protein_gte: Int
  food_string: String

  """All values that are not equal to given value."""
  food_string_not: String

  """All values that are contained in given list."""
  food_string_in: [String!]

  """All values that are not contained in given list."""
  food_string_not_in: [String!]

  """All values less than the given value."""
  food_string_lt: String

  """All values less than or equal the given value."""
  food_string_lte: String

  """All values greater than the given value."""
  food_string_gt: String

  """All values greater than or equal the given value."""
  food_string_gte: String

  """All values containing the given string."""
  food_string_contains: String

  """All values not containing the given string."""
  food_string_not_contains: String

  """All values starting with the given string."""
  food_string_starts_with: String

  """All values not starting with the given string."""
  food_string_not_starts_with: String

  """All values ending with the given string."""
  food_string_ends_with: String

  """All values not ending with the given string."""
  food_string_not_ends_with: String
  meal_type: String

  """All values that are not equal to given value."""
  meal_type_not: String

  """All values that are contained in given list."""
  meal_type_in: [String!]

  """All values that are not contained in given list."""
  meal_type_not_in: [String!]

  """All values less than the given value."""
  meal_type_lt: String

  """All values less than or equal the given value."""
  meal_type_lte: String

  """All values greater than the given value."""
  meal_type_gt: String

  """All values greater than or equal the given value."""
  meal_type_gte: String

  """All values containing the given string."""
  meal_type_contains: String

  """All values not containing the given string."""
  meal_type_not_contains: String

  """All values starting with the given string."""
  meal_type_starts_with: String

  """All values not starting with the given string."""
  meal_type_not_starts_with: String

  """All values ending with the given string."""
  meal_type_ends_with: String

  """All values not ending with the given string."""
  meal_type_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type DailyRecordSubscriptionPayload {
  mutation: MutationType!
  node: DailyRecord
  updatedFields: [String!]
  previousValues: DailyRecordPreviousValues
}

input DailyRecordSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DailyRecordSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DailyRecordSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DailyRecordSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DailyRecordWhereInput
}

input DailyRecordUpdateInput {
  user_id: String
  date: String
  calories: Int
  fat: Int
  carbs: Int
  fiber: Int
  protein: Int
  food_string: String
  meal_type: String
  user: UserUpdateOneRequiredWithoutDaily_recordsInput
}

input DailyRecordUpdateManyDataInput {
  user_id: String
  date: String
  calories: Int
  fat: Int
  carbs: Int
  fiber: Int
  protein: Int
  food_string: String
  meal_type: String
}

input DailyRecordUpdateManyMutationInput {
  user_id: String
  date: String
  calories: Int
  fat: Int
  carbs: Int
  fiber: Int
  protein: Int
  food_string: String
  meal_type: String
}

input DailyRecordUpdateManyWithoutUserInput {
  create: [DailyRecordCreateWithoutUserInput!]
  connect: [DailyRecordWhereUniqueInput!]
  set: [DailyRecordWhereUniqueInput!]
  disconnect: [DailyRecordWhereUniqueInput!]
  delete: [DailyRecordWhereUniqueInput!]
  update: [DailyRecordUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [DailyRecordUpdateManyWithWhereNestedInput!]
  deleteMany: [DailyRecordScalarWhereInput!]
  upsert: [DailyRecordUpsertWithWhereUniqueWithoutUserInput!]
}

input DailyRecordUpdateManyWithWhereNestedInput {
  where: DailyRecordScalarWhereInput!
  data: DailyRecordUpdateManyDataInput!
}

input DailyRecordUpdateWithoutUserDataInput {
  user_id: String
  date: String
  calories: Int
  fat: Int
  carbs: Int
  fiber: Int
  protein: Int
  food_string: String
  meal_type: String
}

input DailyRecordUpdateWithWhereUniqueWithoutUserInput {
  where: DailyRecordWhereUniqueInput!
  data: DailyRecordUpdateWithoutUserDataInput!
}

input DailyRecordUpsertWithWhereUniqueWithoutUserInput {
  where: DailyRecordWhereUniqueInput!
  update: DailyRecordUpdateWithoutUserDataInput!
  create: DailyRecordCreateWithoutUserInput!
}

input DailyRecordWhereInput {
  """Logical AND on all given filters."""
  AND: [DailyRecordWhereInput!]

  """Logical OR on all given filters."""
  OR: [DailyRecordWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DailyRecordWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  date: String

  """All values that are not equal to given value."""
  date_not: String

  """All values that are contained in given list."""
  date_in: [String!]

  """All values that are not contained in given list."""
  date_not_in: [String!]

  """All values less than the given value."""
  date_lt: String

  """All values less than or equal the given value."""
  date_lte: String

  """All values greater than the given value."""
  date_gt: String

  """All values greater than or equal the given value."""
  date_gte: String

  """All values containing the given string."""
  date_contains: String

  """All values not containing the given string."""
  date_not_contains: String

  """All values starting with the given string."""
  date_starts_with: String

  """All values not starting with the given string."""
  date_not_starts_with: String

  """All values ending with the given string."""
  date_ends_with: String

  """All values not ending with the given string."""
  date_not_ends_with: String
  calories: Int

  """All values that are not equal to given value."""
  calories_not: Int

  """All values that are contained in given list."""
  calories_in: [Int!]

  """All values that are not contained in given list."""
  calories_not_in: [Int!]

  """All values less than the given value."""
  calories_lt: Int

  """All values less than or equal the given value."""
  calories_lte: Int

  """All values greater than the given value."""
  calories_gt: Int

  """All values greater than or equal the given value."""
  calories_gte: Int
  fat: Int

  """All values that are not equal to given value."""
  fat_not: Int

  """All values that are contained in given list."""
  fat_in: [Int!]

  """All values that are not contained in given list."""
  fat_not_in: [Int!]

  """All values less than the given value."""
  fat_lt: Int

  """All values less than or equal the given value."""
  fat_lte: Int

  """All values greater than the given value."""
  fat_gt: Int

  """All values greater than or equal the given value."""
  fat_gte: Int
  carbs: Int

  """All values that are not equal to given value."""
  carbs_not: Int

  """All values that are contained in given list."""
  carbs_in: [Int!]

  """All values that are not contained in given list."""
  carbs_not_in: [Int!]

  """All values less than the given value."""
  carbs_lt: Int

  """All values less than or equal the given value."""
  carbs_lte: Int

  """All values greater than the given value."""
  carbs_gt: Int

  """All values greater than or equal the given value."""
  carbs_gte: Int
  fiber: Int

  """All values that are not equal to given value."""
  fiber_not: Int

  """All values that are contained in given list."""
  fiber_in: [Int!]

  """All values that are not contained in given list."""
  fiber_not_in: [Int!]

  """All values less than the given value."""
  fiber_lt: Int

  """All values less than or equal the given value."""
  fiber_lte: Int

  """All values greater than the given value."""
  fiber_gt: Int

  """All values greater than or equal the given value."""
  fiber_gte: Int
  protein: Int

  """All values that are not equal to given value."""
  protein_not: Int

  """All values that are contained in given list."""
  protein_in: [Int!]

  """All values that are not contained in given list."""
  protein_not_in: [Int!]

  """All values less than the given value."""
  protein_lt: Int

  """All values less than or equal the given value."""
  protein_lte: Int

  """All values greater than the given value."""
  protein_gt: Int

  """All values greater than or equal the given value."""
  protein_gte: Int
  food_string: String

  """All values that are not equal to given value."""
  food_string_not: String

  """All values that are contained in given list."""
  food_string_in: [String!]

  """All values that are not contained in given list."""
  food_string_not_in: [String!]

  """All values less than the given value."""
  food_string_lt: String

  """All values less than or equal the given value."""
  food_string_lte: String

  """All values greater than the given value."""
  food_string_gt: String

  """All values greater than or equal the given value."""
  food_string_gte: String

  """All values containing the given string."""
  food_string_contains: String

  """All values not containing the given string."""
  food_string_not_contains: String

  """All values starting with the given string."""
  food_string_starts_with: String

  """All values not starting with the given string."""
  food_string_not_starts_with: String

  """All values ending with the given string."""
  food_string_ends_with: String

  """All values not ending with the given string."""
  food_string_not_ends_with: String
  meal_type: String

  """All values that are not equal to given value."""
  meal_type_not: String

  """All values that are contained in given list."""
  meal_type_in: [String!]

  """All values that are not contained in given list."""
  meal_type_not_in: [String!]

  """All values less than the given value."""
  meal_type_lt: String

  """All values less than or equal the given value."""
  meal_type_lte: String

  """All values greater than the given value."""
  meal_type_gt: String

  """All values greater than or equal the given value."""
  meal_type_gte: String

  """All values containing the given string."""
  meal_type_contains: String

  """All values not containing the given string."""
  meal_type_not_contains: String

  """All values starting with the given string."""
  meal_type_starts_with: String

  """All values not starting with the given string."""
  meal_type_not_starts_with: String

  """All values ending with the given string."""
  meal_type_ends_with: String

  """All values not ending with the given string."""
  meal_type_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  user: UserWhereInput
}

input DailyRecordWhereUniqueInput {
  id: ID
}

scalar DateTime

type FavoriteFood implements Node {
  id: ID!
  food_id: String!
  custom: Boolean!
  user_id: String!
  user: User!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type FavoriteFoodConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FavoriteFoodEdge]!
  aggregate: AggregateFavoriteFood!
}

input FavoriteFoodCreateInput {
  id: ID
  food_id: String!
  custom: Boolean!
  user_id: String!
  user: UserCreateOneWithoutFavoritesInput!
}

input FavoriteFoodCreateManyWithoutUserInput {
  create: [FavoriteFoodCreateWithoutUserInput!]
  connect: [FavoriteFoodWhereUniqueInput!]
}

input FavoriteFoodCreateWithoutUserInput {
  id: ID
  food_id: String!
  custom: Boolean!
  user_id: String!
}

"""An edge in a connection."""
type FavoriteFoodEdge {
  """The item at the end of the edge."""
  node: FavoriteFood!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FavoriteFoodOrderByInput {
  id_ASC
  id_DESC
  food_id_ASC
  food_id_DESC
  custom_ASC
  custom_DESC
  user_id_ASC
  user_id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FavoriteFoodPreviousValues {
  id: ID!
  food_id: String!
  custom: Boolean!
  user_id: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input FavoriteFoodScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FavoriteFoodScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FavoriteFoodScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FavoriteFoodScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  food_id: String

  """All values that are not equal to given value."""
  food_id_not: String

  """All values that are contained in given list."""
  food_id_in: [String!]

  """All values that are not contained in given list."""
  food_id_not_in: [String!]

  """All values less than the given value."""
  food_id_lt: String

  """All values less than or equal the given value."""
  food_id_lte: String

  """All values greater than the given value."""
  food_id_gt: String

  """All values greater than or equal the given value."""
  food_id_gte: String

  """All values containing the given string."""
  food_id_contains: String

  """All values not containing the given string."""
  food_id_not_contains: String

  """All values starting with the given string."""
  food_id_starts_with: String

  """All values not starting with the given string."""
  food_id_not_starts_with: String

  """All values ending with the given string."""
  food_id_ends_with: String

  """All values not ending with the given string."""
  food_id_not_ends_with: String
  custom: Boolean

  """All values that are not equal to given value."""
  custom_not: Boolean
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type FavoriteFoodSubscriptionPayload {
  mutation: MutationType!
  node: FavoriteFood
  updatedFields: [String!]
  previousValues: FavoriteFoodPreviousValues
}

input FavoriteFoodSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FavoriteFoodSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FavoriteFoodSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FavoriteFoodSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FavoriteFoodWhereInput
}

input FavoriteFoodUpdateInput {
  food_id: String
  custom: Boolean
  user_id: String
  user: UserUpdateOneRequiredWithoutFavoritesInput
}

input FavoriteFoodUpdateManyDataInput {
  food_id: String
  custom: Boolean
  user_id: String
}

input FavoriteFoodUpdateManyMutationInput {
  food_id: String
  custom: Boolean
  user_id: String
}

input FavoriteFoodUpdateManyWithoutUserInput {
  create: [FavoriteFoodCreateWithoutUserInput!]
  connect: [FavoriteFoodWhereUniqueInput!]
  set: [FavoriteFoodWhereUniqueInput!]
  disconnect: [FavoriteFoodWhereUniqueInput!]
  delete: [FavoriteFoodWhereUniqueInput!]
  update: [FavoriteFoodUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [FavoriteFoodUpdateManyWithWhereNestedInput!]
  deleteMany: [FavoriteFoodScalarWhereInput!]
  upsert: [FavoriteFoodUpsertWithWhereUniqueWithoutUserInput!]
}

input FavoriteFoodUpdateManyWithWhereNestedInput {
  where: FavoriteFoodScalarWhereInput!
  data: FavoriteFoodUpdateManyDataInput!
}

input FavoriteFoodUpdateWithoutUserDataInput {
  food_id: String
  custom: Boolean
  user_id: String
}

input FavoriteFoodUpdateWithWhereUniqueWithoutUserInput {
  where: FavoriteFoodWhereUniqueInput!
  data: FavoriteFoodUpdateWithoutUserDataInput!
}

input FavoriteFoodUpsertWithWhereUniqueWithoutUserInput {
  where: FavoriteFoodWhereUniqueInput!
  update: FavoriteFoodUpdateWithoutUserDataInput!
  create: FavoriteFoodCreateWithoutUserInput!
}

input FavoriteFoodWhereInput {
  """Logical AND on all given filters."""
  AND: [FavoriteFoodWhereInput!]

  """Logical OR on all given filters."""
  OR: [FavoriteFoodWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FavoriteFoodWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  food_id: String

  """All values that are not equal to given value."""
  food_id_not: String

  """All values that are contained in given list."""
  food_id_in: [String!]

  """All values that are not contained in given list."""
  food_id_not_in: [String!]

  """All values less than the given value."""
  food_id_lt: String

  """All values less than or equal the given value."""
  food_id_lte: String

  """All values greater than the given value."""
  food_id_gt: String

  """All values greater than or equal the given value."""
  food_id_gte: String

  """All values containing the given string."""
  food_id_contains: String

  """All values not containing the given string."""
  food_id_not_contains: String

  """All values starting with the given string."""
  food_id_starts_with: String

  """All values not starting with the given string."""
  food_id_not_starts_with: String

  """All values ending with the given string."""
  food_id_ends_with: String

  """All values not ending with the given string."""
  food_id_not_ends_with: String
  custom: Boolean

  """All values that are not equal to given value."""
  custom_not: Boolean
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  user: UserWhereInput
}

input FavoriteFoodWhereUniqueInput {
  id: ID
}

type IngredientList implements Node {
  id: ID!
  user_id: String!
  recipe_id: String!
  ingredient_id: String!
  custom: Boolean!
  amount: Float!
  unit: String!
  recipe: CustomRecipe!
  user: User!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type IngredientListConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IngredientListEdge]!
  aggregate: AggregateIngredientList!
}

input IngredientListCreateInput {
  id: ID
  user_id: String!
  recipe_id: String!
  ingredient_id: String!
  custom: Boolean!
  amount: Float!
  unit: String!
  recipe: CustomRecipeCreateOneWithoutIngredient_listInput!
  user: UserCreateOneWithoutIngredient_listInput!
}

input IngredientListCreateManyWithoutRecipeInput {
  create: [IngredientListCreateWithoutRecipeInput!]
  connect: [IngredientListWhereUniqueInput!]
}

input IngredientListCreateManyWithoutUserInput {
  create: [IngredientListCreateWithoutUserInput!]
  connect: [IngredientListWhereUniqueInput!]
}

input IngredientListCreateWithoutRecipeInput {
  id: ID
  user_id: String!
  recipe_id: String!
  ingredient_id: String!
  custom: Boolean!
  amount: Float!
  unit: String!
  user: UserCreateOneWithoutIngredient_listInput!
}

input IngredientListCreateWithoutUserInput {
  id: ID
  user_id: String!
  recipe_id: String!
  ingredient_id: String!
  custom: Boolean!
  amount: Float!
  unit: String!
  recipe: CustomRecipeCreateOneWithoutIngredient_listInput!
}

"""An edge in a connection."""
type IngredientListEdge {
  """The item at the end of the edge."""
  node: IngredientList!

  """A cursor for use in pagination."""
  cursor: String!
}

enum IngredientListOrderByInput {
  id_ASC
  id_DESC
  user_id_ASC
  user_id_DESC
  recipe_id_ASC
  recipe_id_DESC
  ingredient_id_ASC
  ingredient_id_DESC
  custom_ASC
  custom_DESC
  amount_ASC
  amount_DESC
  unit_ASC
  unit_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type IngredientListPreviousValues {
  id: ID!
  user_id: String!
  recipe_id: String!
  ingredient_id: String!
  custom: Boolean!
  amount: Float!
  unit: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input IngredientListScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [IngredientListScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [IngredientListScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IngredientListScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  recipe_id: String

  """All values that are not equal to given value."""
  recipe_id_not: String

  """All values that are contained in given list."""
  recipe_id_in: [String!]

  """All values that are not contained in given list."""
  recipe_id_not_in: [String!]

  """All values less than the given value."""
  recipe_id_lt: String

  """All values less than or equal the given value."""
  recipe_id_lte: String

  """All values greater than the given value."""
  recipe_id_gt: String

  """All values greater than or equal the given value."""
  recipe_id_gte: String

  """All values containing the given string."""
  recipe_id_contains: String

  """All values not containing the given string."""
  recipe_id_not_contains: String

  """All values starting with the given string."""
  recipe_id_starts_with: String

  """All values not starting with the given string."""
  recipe_id_not_starts_with: String

  """All values ending with the given string."""
  recipe_id_ends_with: String

  """All values not ending with the given string."""
  recipe_id_not_ends_with: String
  ingredient_id: String

  """All values that are not equal to given value."""
  ingredient_id_not: String

  """All values that are contained in given list."""
  ingredient_id_in: [String!]

  """All values that are not contained in given list."""
  ingredient_id_not_in: [String!]

  """All values less than the given value."""
  ingredient_id_lt: String

  """All values less than or equal the given value."""
  ingredient_id_lte: String

  """All values greater than the given value."""
  ingredient_id_gt: String

  """All values greater than or equal the given value."""
  ingredient_id_gte: String

  """All values containing the given string."""
  ingredient_id_contains: String

  """All values not containing the given string."""
  ingredient_id_not_contains: String

  """All values starting with the given string."""
  ingredient_id_starts_with: String

  """All values not starting with the given string."""
  ingredient_id_not_starts_with: String

  """All values ending with the given string."""
  ingredient_id_ends_with: String

  """All values not ending with the given string."""
  ingredient_id_not_ends_with: String
  custom: Boolean

  """All values that are not equal to given value."""
  custom_not: Boolean
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  unit: String

  """All values that are not equal to given value."""
  unit_not: String

  """All values that are contained in given list."""
  unit_in: [String!]

  """All values that are not contained in given list."""
  unit_not_in: [String!]

  """All values less than the given value."""
  unit_lt: String

  """All values less than or equal the given value."""
  unit_lte: String

  """All values greater than the given value."""
  unit_gt: String

  """All values greater than or equal the given value."""
  unit_gte: String

  """All values containing the given string."""
  unit_contains: String

  """All values not containing the given string."""
  unit_not_contains: String

  """All values starting with the given string."""
  unit_starts_with: String

  """All values not starting with the given string."""
  unit_not_starts_with: String

  """All values ending with the given string."""
  unit_ends_with: String

  """All values not ending with the given string."""
  unit_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type IngredientListSubscriptionPayload {
  mutation: MutationType!
  node: IngredientList
  updatedFields: [String!]
  previousValues: IngredientListPreviousValues
}

input IngredientListSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [IngredientListSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [IngredientListSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IngredientListSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: IngredientListWhereInput
}

input IngredientListUpdateInput {
  user_id: String
  recipe_id: String
  ingredient_id: String
  custom: Boolean
  amount: Float
  unit: String
  recipe: CustomRecipeUpdateOneRequiredWithoutIngredient_listInput
  user: UserUpdateOneRequiredWithoutIngredient_listInput
}

input IngredientListUpdateManyDataInput {
  user_id: String
  recipe_id: String
  ingredient_id: String
  custom: Boolean
  amount: Float
  unit: String
}

input IngredientListUpdateManyMutationInput {
  user_id: String
  recipe_id: String
  ingredient_id: String
  custom: Boolean
  amount: Float
  unit: String
}

input IngredientListUpdateManyWithoutRecipeInput {
  create: [IngredientListCreateWithoutRecipeInput!]
  connect: [IngredientListWhereUniqueInput!]
  set: [IngredientListWhereUniqueInput!]
  disconnect: [IngredientListWhereUniqueInput!]
  delete: [IngredientListWhereUniqueInput!]
  update: [IngredientListUpdateWithWhereUniqueWithoutRecipeInput!]
  updateMany: [IngredientListUpdateManyWithWhereNestedInput!]
  deleteMany: [IngredientListScalarWhereInput!]
  upsert: [IngredientListUpsertWithWhereUniqueWithoutRecipeInput!]
}

input IngredientListUpdateManyWithoutUserInput {
  create: [IngredientListCreateWithoutUserInput!]
  connect: [IngredientListWhereUniqueInput!]
  set: [IngredientListWhereUniqueInput!]
  disconnect: [IngredientListWhereUniqueInput!]
  delete: [IngredientListWhereUniqueInput!]
  update: [IngredientListUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [IngredientListUpdateManyWithWhereNestedInput!]
  deleteMany: [IngredientListScalarWhereInput!]
  upsert: [IngredientListUpsertWithWhereUniqueWithoutUserInput!]
}

input IngredientListUpdateManyWithWhereNestedInput {
  where: IngredientListScalarWhereInput!
  data: IngredientListUpdateManyDataInput!
}

input IngredientListUpdateWithoutRecipeDataInput {
  user_id: String
  recipe_id: String
  ingredient_id: String
  custom: Boolean
  amount: Float
  unit: String
  user: UserUpdateOneRequiredWithoutIngredient_listInput
}

input IngredientListUpdateWithoutUserDataInput {
  user_id: String
  recipe_id: String
  ingredient_id: String
  custom: Boolean
  amount: Float
  unit: String
  recipe: CustomRecipeUpdateOneRequiredWithoutIngredient_listInput
}

input IngredientListUpdateWithWhereUniqueWithoutRecipeInput {
  where: IngredientListWhereUniqueInput!
  data: IngredientListUpdateWithoutRecipeDataInput!
}

input IngredientListUpdateWithWhereUniqueWithoutUserInput {
  where: IngredientListWhereUniqueInput!
  data: IngredientListUpdateWithoutUserDataInput!
}

input IngredientListUpsertWithWhereUniqueWithoutRecipeInput {
  where: IngredientListWhereUniqueInput!
  update: IngredientListUpdateWithoutRecipeDataInput!
  create: IngredientListCreateWithoutRecipeInput!
}

input IngredientListUpsertWithWhereUniqueWithoutUserInput {
  where: IngredientListWhereUniqueInput!
  update: IngredientListUpdateWithoutUserDataInput!
  create: IngredientListCreateWithoutUserInput!
}

input IngredientListWhereInput {
  """Logical AND on all given filters."""
  AND: [IngredientListWhereInput!]

  """Logical OR on all given filters."""
  OR: [IngredientListWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IngredientListWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  recipe_id: String

  """All values that are not equal to given value."""
  recipe_id_not: String

  """All values that are contained in given list."""
  recipe_id_in: [String!]

  """All values that are not contained in given list."""
  recipe_id_not_in: [String!]

  """All values less than the given value."""
  recipe_id_lt: String

  """All values less than or equal the given value."""
  recipe_id_lte: String

  """All values greater than the given value."""
  recipe_id_gt: String

  """All values greater than or equal the given value."""
  recipe_id_gte: String

  """All values containing the given string."""
  recipe_id_contains: String

  """All values not containing the given string."""
  recipe_id_not_contains: String

  """All values starting with the given string."""
  recipe_id_starts_with: String

  """All values not starting with the given string."""
  recipe_id_not_starts_with: String

  """All values ending with the given string."""
  recipe_id_ends_with: String

  """All values not ending with the given string."""
  recipe_id_not_ends_with: String
  ingredient_id: String

  """All values that are not equal to given value."""
  ingredient_id_not: String

  """All values that are contained in given list."""
  ingredient_id_in: [String!]

  """All values that are not contained in given list."""
  ingredient_id_not_in: [String!]

  """All values less than the given value."""
  ingredient_id_lt: String

  """All values less than or equal the given value."""
  ingredient_id_lte: String

  """All values greater than the given value."""
  ingredient_id_gt: String

  """All values greater than or equal the given value."""
  ingredient_id_gte: String

  """All values containing the given string."""
  ingredient_id_contains: String

  """All values not containing the given string."""
  ingredient_id_not_contains: String

  """All values starting with the given string."""
  ingredient_id_starts_with: String

  """All values not starting with the given string."""
  ingredient_id_not_starts_with: String

  """All values ending with the given string."""
  ingredient_id_ends_with: String

  """All values not ending with the given string."""
  ingredient_id_not_ends_with: String
  custom: Boolean

  """All values that are not equal to given value."""
  custom_not: Boolean
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  unit: String

  """All values that are not equal to given value."""
  unit_not: String

  """All values that are contained in given list."""
  unit_in: [String!]

  """All values that are not contained in given list."""
  unit_not_in: [String!]

  """All values less than the given value."""
  unit_lt: String

  """All values less than or equal the given value."""
  unit_lte: String

  """All values greater than the given value."""
  unit_gt: String

  """All values greater than or equal the given value."""
  unit_gte: String

  """All values containing the given string."""
  unit_contains: String

  """All values not containing the given string."""
  unit_not_contains: String

  """All values starting with the given string."""
  unit_starts_with: String

  """All values not starting with the given string."""
  unit_not_starts_with: String

  """All values ending with the given string."""
  unit_ends_with: String

  """All values not ending with the given string."""
  unit_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  recipe: CustomRecipeWhereInput
  user: UserWhereInput
}

input IngredientListWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createProfile(data: ProfileCreateInput!): Profile!
  createDailyRecord(data: DailyRecordCreateInput!): DailyRecord!
  createCustomRecipe(data: CustomRecipeCreateInput!): CustomRecipe!
  createCustomIngredient(data: CustomIngredientCreateInput!): CustomIngredient!
  createIngredientList(data: IngredientListCreateInput!): IngredientList!
  createFavoriteFood(data: FavoriteFoodCreateInput!): FavoriteFood!
  createWeightLog(data: WeightLogCreateInput!): WeightLog!
  createPost(data: PostCreateInput!): Post!
  createComment(data: CommentCreateInput!): Comment!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateDailyRecord(data: DailyRecordUpdateInput!, where: DailyRecordWhereUniqueInput!): DailyRecord
  updateCustomRecipe(data: CustomRecipeUpdateInput!, where: CustomRecipeWhereUniqueInput!): CustomRecipe
  updateCustomIngredient(data: CustomIngredientUpdateInput!, where: CustomIngredientWhereUniqueInput!): CustomIngredient
  updateIngredientList(data: IngredientListUpdateInput!, where: IngredientListWhereUniqueInput!): IngredientList
  updateFavoriteFood(data: FavoriteFoodUpdateInput!, where: FavoriteFoodWhereUniqueInput!): FavoriteFood
  updateWeightLog(data: WeightLogUpdateInput!, where: WeightLogWhereUniqueInput!): WeightLog
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  deleteUser(where: UserWhereUniqueInput!): User
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteDailyRecord(where: DailyRecordWhereUniqueInput!): DailyRecord
  deleteCustomRecipe(where: CustomRecipeWhereUniqueInput!): CustomRecipe
  deleteCustomIngredient(where: CustomIngredientWhereUniqueInput!): CustomIngredient
  deleteIngredientList(where: IngredientListWhereUniqueInput!): IngredientList
  deleteFavoriteFood(where: FavoriteFoodWhereUniqueInput!): FavoriteFood
  deleteWeightLog(where: WeightLogWhereUniqueInput!): WeightLog
  deletePost(where: PostWhereUniqueInput!): Post
  deleteComment(where: CommentWhereUniqueInput!): Comment
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertProfile(where: ProfileWhereUniqueInput!, create: ProfileCreateInput!, update: ProfileUpdateInput!): Profile!
  upsertDailyRecord(where: DailyRecordWhereUniqueInput!, create: DailyRecordCreateInput!, update: DailyRecordUpdateInput!): DailyRecord!
  upsertCustomRecipe(where: CustomRecipeWhereUniqueInput!, create: CustomRecipeCreateInput!, update: CustomRecipeUpdateInput!): CustomRecipe!
  upsertCustomIngredient(where: CustomIngredientWhereUniqueInput!, create: CustomIngredientCreateInput!, update: CustomIngredientUpdateInput!): CustomIngredient!
  upsertIngredientList(where: IngredientListWhereUniqueInput!, create: IngredientListCreateInput!, update: IngredientListUpdateInput!): IngredientList!
  upsertFavoriteFood(where: FavoriteFoodWhereUniqueInput!, create: FavoriteFoodCreateInput!, update: FavoriteFoodUpdateInput!): FavoriteFood!
  upsertWeightLog(where: WeightLogWhereUniqueInput!, create: WeightLogCreateInput!, update: WeightLogUpdateInput!): WeightLog!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyProfiles(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): BatchPayload!
  updateManyDailyRecords(data: DailyRecordUpdateManyMutationInput!, where: DailyRecordWhereInput): BatchPayload!
  updateManyCustomRecipes(data: CustomRecipeUpdateManyMutationInput!, where: CustomRecipeWhereInput): BatchPayload!
  updateManyCustomIngredients(data: CustomIngredientUpdateManyMutationInput!, where: CustomIngredientWhereInput): BatchPayload!
  updateManyIngredientLists(data: IngredientListUpdateManyMutationInput!, where: IngredientListWhereInput): BatchPayload!
  updateManyFavoriteFoods(data: FavoriteFoodUpdateManyMutationInput!, where: FavoriteFoodWhereInput): BatchPayload!
  updateManyWeightLogs(data: WeightLogUpdateManyMutationInput!, where: WeightLogWhereInput): BatchPayload!
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyProfiles(where: ProfileWhereInput): BatchPayload!
  deleteManyDailyRecords(where: DailyRecordWhereInput): BatchPayload!
  deleteManyCustomRecipes(where: CustomRecipeWhereInput): BatchPayload!
  deleteManyCustomIngredients(where: CustomIngredientWhereInput): BatchPayload!
  deleteManyIngredientLists(where: IngredientListWhereInput): BatchPayload!
  deleteManyFavoriteFoods(where: FavoriteFoodWhereInput): BatchPayload!
  deleteManyWeightLogs(where: WeightLogWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Post implements Node {
  id: ID!
  user: User!
  user_id: String!
  viewCount: Int!
  likeCount: Int!
  title: String!
  body: String!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  user_id: String!
  viewCount: Int!
  likeCount: Int!
  title: String!
  body: String!
  user: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutCommentsInput {
  id: ID
  user_id: String!
  viewCount: Int!
  likeCount: Int!
  title: String!
  body: String!
  user: UserCreateOneWithoutPostsInput!
}

input PostCreateWithoutUserInput {
  id: ID
  user_id: String!
  viewCount: Int!
  likeCount: Int!
  title: String!
  body: String!
  comments: CommentCreateManyWithoutPostInput
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  user_id_ASC
  user_id_DESC
  viewCount_ASC
  viewCount_DESC
  likeCount_ASC
  likeCount_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  user_id: String!
  viewCount: Int!
  likeCount: Int!
  title: String!
  body: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input PostScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PostScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  viewCount: Int

  """All values that are not equal to given value."""
  viewCount_not: Int

  """All values that are contained in given list."""
  viewCount_in: [Int!]

  """All values that are not contained in given list."""
  viewCount_not_in: [Int!]

  """All values less than the given value."""
  viewCount_lt: Int

  """All values less than or equal the given value."""
  viewCount_lte: Int

  """All values greater than the given value."""
  viewCount_gt: Int

  """All values greater than or equal the given value."""
  viewCount_gte: Int
  likeCount: Int

  """All values that are not equal to given value."""
  likeCount_not: Int

  """All values that are contained in given list."""
  likeCount_in: [Int!]

  """All values that are not contained in given list."""
  likeCount_not_in: [Int!]

  """All values less than the given value."""
  likeCount_lt: Int

  """All values less than or equal the given value."""
  likeCount_lte: Int

  """All values greater than the given value."""
  likeCount_gt: Int

  """All values greater than or equal the given value."""
  likeCount_gte: Int
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  user_id: String
  viewCount: Int
  likeCount: Int
  title: String
  body: String
  user: UserUpdateOneRequiredWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateManyDataInput {
  user_id: String
  viewCount: Int
  likeCount: Int
  title: String
  body: String
}

input PostUpdateManyMutationInput {
  user_id: String
  viewCount: Int
  likeCount: Int
  title: String
  body: String
}

input PostUpdateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateWithoutCommentsDataInput {
  user_id: String
  viewCount: Int
  likeCount: Int
  title: String
  body: String
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutUserDataInput {
  user_id: String
  viewCount: Int
  likeCount: Int
  title: String
  body: String
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutUserDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutUserDataInput!
  create: PostCreateWithoutUserInput!
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  viewCount: Int

  """All values that are not equal to given value."""
  viewCount_not: Int

  """All values that are contained in given list."""
  viewCount_in: [Int!]

  """All values that are not contained in given list."""
  viewCount_not_in: [Int!]

  """All values less than the given value."""
  viewCount_lt: Int

  """All values less than or equal the given value."""
  viewCount_lte: Int

  """All values greater than the given value."""
  viewCount_gt: Int

  """All values greater than or equal the given value."""
  viewCount_gte: Int
  likeCount: Int

  """All values that are not equal to given value."""
  likeCount_not: Int

  """All values that are contained in given list."""
  likeCount_in: [Int!]

  """All values that are not contained in given list."""
  likeCount_not_in: [Int!]

  """All values less than the given value."""
  likeCount_lt: Int

  """All values less than or equal the given value."""
  likeCount_lte: Int

  """All values greater than the given value."""
  likeCount_gt: Int

  """All values greater than or equal the given value."""
  likeCount_gte: Int
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  user: UserWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

enum PrismaDatabase {
  default
}

type Profile implements Node {
  id: ID!
  user_id: String!
  age: Int!
  weight: Int!
  height: Int!
  gender: Boolean
  goal_weight: Int
  activity_level: Int
  diet: String
  fat: Int
  carbs: Int
  protein: Int
  fiber: Int
  calories: Int
  user: User!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type ProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProfileEdge]!
  aggregate: AggregateProfile!
}

input ProfileCreateInput {
  id: ID
  user_id: String!
  age: Int!
  weight: Int!
  height: Int!
  gender: Boolean
  goal_weight: Int
  activity_level: Int
  diet: String
  fat: Int
  carbs: Int
  protein: Int
  fiber: Int
  calories: Int
  user: UserCreateOneWithoutProfileInput!
}

input ProfileCreateOneWithoutUserInput {
  create: ProfileCreateWithoutUserInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateWithoutUserInput {
  id: ID
  user_id: String!
  age: Int!
  weight: Int!
  height: Int!
  gender: Boolean
  goal_weight: Int
  activity_level: Int
  diet: String
  fat: Int
  carbs: Int
  protein: Int
  fiber: Int
  calories: Int
}

"""An edge in a connection."""
type ProfileEdge {
  """The item at the end of the edge."""
  node: Profile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProfileOrderByInput {
  id_ASC
  id_DESC
  user_id_ASC
  user_id_DESC
  age_ASC
  age_DESC
  weight_ASC
  weight_DESC
  height_ASC
  height_DESC
  gender_ASC
  gender_DESC
  goal_weight_ASC
  goal_weight_DESC
  activity_level_ASC
  activity_level_DESC
  diet_ASC
  diet_DESC
  fat_ASC
  fat_DESC
  carbs_ASC
  carbs_DESC
  protein_ASC
  protein_DESC
  fiber_ASC
  fiber_DESC
  calories_ASC
  calories_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProfilePreviousValues {
  id: ID!
  user_id: String!
  age: Int!
  weight: Int!
  height: Int!
  gender: Boolean
  goal_weight: Int
  activity_level: Int
  diet: String
  fat: Int
  carbs: Int
  protein: Int
  fiber: Int
  calories: Int
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ProfileSubscriptionPayload {
  mutation: MutationType!
  node: Profile
  updatedFields: [String!]
  previousValues: ProfilePreviousValues
}

input ProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfileSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProfileWhereInput
}

input ProfileUpdateInput {
  user_id: String
  age: Int
  weight: Int
  height: Int
  gender: Boolean
  goal_weight: Int
  activity_level: Int
  diet: String
  fat: Int
  carbs: Int
  protein: Int
  fiber: Int
  calories: Int
  user: UserUpdateOneRequiredWithoutProfileInput
}

input ProfileUpdateManyMutationInput {
  user_id: String
  age: Int
  weight: Int
  height: Int
  gender: Boolean
  goal_weight: Int
  activity_level: Int
  diet: String
  fat: Int
  carbs: Int
  protein: Int
  fiber: Int
  calories: Int
}

input ProfileUpdateOneWithoutUserInput {
  create: ProfileCreateWithoutUserInput
  connect: ProfileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProfileUpdateWithoutUserDataInput
  upsert: ProfileUpsertWithoutUserInput
}

input ProfileUpdateWithoutUserDataInput {
  user_id: String
  age: Int
  weight: Int
  height: Int
  gender: Boolean
  goal_weight: Int
  activity_level: Int
  diet: String
  fat: Int
  carbs: Int
  protein: Int
  fiber: Int
  calories: Int
}

input ProfileUpsertWithoutUserInput {
  update: ProfileUpdateWithoutUserDataInput!
  create: ProfileCreateWithoutUserInput!
}

input ProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  age: Int

  """All values that are not equal to given value."""
  age_not: Int

  """All values that are contained in given list."""
  age_in: [Int!]

  """All values that are not contained in given list."""
  age_not_in: [Int!]

  """All values less than the given value."""
  age_lt: Int

  """All values less than or equal the given value."""
  age_lte: Int

  """All values greater than the given value."""
  age_gt: Int

  """All values greater than or equal the given value."""
  age_gte: Int
  weight: Int

  """All values that are not equal to given value."""
  weight_not: Int

  """All values that are contained in given list."""
  weight_in: [Int!]

  """All values that are not contained in given list."""
  weight_not_in: [Int!]

  """All values less than the given value."""
  weight_lt: Int

  """All values less than or equal the given value."""
  weight_lte: Int

  """All values greater than the given value."""
  weight_gt: Int

  """All values greater than or equal the given value."""
  weight_gte: Int
  height: Int

  """All values that are not equal to given value."""
  height_not: Int

  """All values that are contained in given list."""
  height_in: [Int!]

  """All values that are not contained in given list."""
  height_not_in: [Int!]

  """All values less than the given value."""
  height_lt: Int

  """All values less than or equal the given value."""
  height_lte: Int

  """All values greater than the given value."""
  height_gt: Int

  """All values greater than or equal the given value."""
  height_gte: Int
  gender: Boolean

  """All values that are not equal to given value."""
  gender_not: Boolean
  goal_weight: Int

  """All values that are not equal to given value."""
  goal_weight_not: Int

  """All values that are contained in given list."""
  goal_weight_in: [Int!]

  """All values that are not contained in given list."""
  goal_weight_not_in: [Int!]

  """All values less than the given value."""
  goal_weight_lt: Int

  """All values less than or equal the given value."""
  goal_weight_lte: Int

  """All values greater than the given value."""
  goal_weight_gt: Int

  """All values greater than or equal the given value."""
  goal_weight_gte: Int
  activity_level: Int

  """All values that are not equal to given value."""
  activity_level_not: Int

  """All values that are contained in given list."""
  activity_level_in: [Int!]

  """All values that are not contained in given list."""
  activity_level_not_in: [Int!]

  """All values less than the given value."""
  activity_level_lt: Int

  """All values less than or equal the given value."""
  activity_level_lte: Int

  """All values greater than the given value."""
  activity_level_gt: Int

  """All values greater than or equal the given value."""
  activity_level_gte: Int
  diet: String

  """All values that are not equal to given value."""
  diet_not: String

  """All values that are contained in given list."""
  diet_in: [String!]

  """All values that are not contained in given list."""
  diet_not_in: [String!]

  """All values less than the given value."""
  diet_lt: String

  """All values less than or equal the given value."""
  diet_lte: String

  """All values greater than the given value."""
  diet_gt: String

  """All values greater than or equal the given value."""
  diet_gte: String

  """All values containing the given string."""
  diet_contains: String

  """All values not containing the given string."""
  diet_not_contains: String

  """All values starting with the given string."""
  diet_starts_with: String

  """All values not starting with the given string."""
  diet_not_starts_with: String

  """All values ending with the given string."""
  diet_ends_with: String

  """All values not ending with the given string."""
  diet_not_ends_with: String
  fat: Int

  """All values that are not equal to given value."""
  fat_not: Int

  """All values that are contained in given list."""
  fat_in: [Int!]

  """All values that are not contained in given list."""
  fat_not_in: [Int!]

  """All values less than the given value."""
  fat_lt: Int

  """All values less than or equal the given value."""
  fat_lte: Int

  """All values greater than the given value."""
  fat_gt: Int

  """All values greater than or equal the given value."""
  fat_gte: Int
  carbs: Int

  """All values that are not equal to given value."""
  carbs_not: Int

  """All values that are contained in given list."""
  carbs_in: [Int!]

  """All values that are not contained in given list."""
  carbs_not_in: [Int!]

  """All values less than the given value."""
  carbs_lt: Int

  """All values less than or equal the given value."""
  carbs_lte: Int

  """All values greater than the given value."""
  carbs_gt: Int

  """All values greater than or equal the given value."""
  carbs_gte: Int
  protein: Int

  """All values that are not equal to given value."""
  protein_not: Int

  """All values that are contained in given list."""
  protein_in: [Int!]

  """All values that are not contained in given list."""
  protein_not_in: [Int!]

  """All values less than the given value."""
  protein_lt: Int

  """All values less than or equal the given value."""
  protein_lte: Int

  """All values greater than the given value."""
  protein_gt: Int

  """All values greater than or equal the given value."""
  protein_gte: Int
  fiber: Int

  """All values that are not equal to given value."""
  fiber_not: Int

  """All values that are contained in given list."""
  fiber_in: [Int!]

  """All values that are not contained in given list."""
  fiber_not_in: [Int!]

  """All values less than the given value."""
  fiber_lt: Int

  """All values less than or equal the given value."""
  fiber_lte: Int

  """All values greater than the given value."""
  fiber_gt: Int

  """All values greater than or equal the given value."""
  fiber_gte: Int
  calories: Int

  """All values that are not equal to given value."""
  calories_not: Int

  """All values that are contained in given list."""
  calories_in: [Int!]

  """All values that are not contained in given list."""
  calories_not_in: [Int!]

  """All values less than the given value."""
  calories_lt: Int

  """All values less than or equal the given value."""
  calories_lte: Int

  """All values greater than the given value."""
  calories_gt: Int

  """All values greater than or equal the given value."""
  calories_gte: Int
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  user: UserWhereInput
}

input ProfileWhereUniqueInput {
  id: ID
  user_id: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  profiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile]!
  dailyRecords(where: DailyRecordWhereInput, orderBy: DailyRecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DailyRecord]!
  customRecipes(where: CustomRecipeWhereInput, orderBy: CustomRecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CustomRecipe]!
  customIngredients(where: CustomIngredientWhereInput, orderBy: CustomIngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CustomIngredient]!
  ingredientLists(where: IngredientListWhereInput, orderBy: IngredientListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [IngredientList]!
  favoriteFoods(where: FavoriteFoodWhereInput, orderBy: FavoriteFoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FavoriteFood]!
  weightLogs(where: WeightLogWhereInput, orderBy: WeightLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WeightLog]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  user(where: UserWhereUniqueInput!): User
  profile(where: ProfileWhereUniqueInput!): Profile
  dailyRecord(where: DailyRecordWhereUniqueInput!): DailyRecord
  customRecipe(where: CustomRecipeWhereUniqueInput!): CustomRecipe
  customIngredient(where: CustomIngredientWhereUniqueInput!): CustomIngredient
  ingredientList(where: IngredientListWhereUniqueInput!): IngredientList
  favoriteFood(where: FavoriteFoodWhereUniqueInput!): FavoriteFood
  weightLog(where: WeightLogWhereUniqueInput!): WeightLog
  post(where: PostWhereUniqueInput!): Post
  comment(where: CommentWhereUniqueInput!): Comment
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  profilesConnection(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileConnection!
  dailyRecordsConnection(where: DailyRecordWhereInput, orderBy: DailyRecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DailyRecordConnection!
  customRecipesConnection(where: CustomRecipeWhereInput, orderBy: CustomRecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomRecipeConnection!
  customIngredientsConnection(where: CustomIngredientWhereInput, orderBy: CustomIngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomIngredientConnection!
  ingredientListsConnection(where: IngredientListWhereInput, orderBy: IngredientListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IngredientListConnection!
  favoriteFoodsConnection(where: FavoriteFoodWhereInput, orderBy: FavoriteFoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FavoriteFoodConnection!
  weightLogsConnection(where: WeightLogWhereInput, orderBy: WeightLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WeightLogConnection!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  profile(where: ProfileSubscriptionWhereInput): ProfileSubscriptionPayload
  dailyRecord(where: DailyRecordSubscriptionWhereInput): DailyRecordSubscriptionPayload
  customRecipe(where: CustomRecipeSubscriptionWhereInput): CustomRecipeSubscriptionPayload
  customIngredient(where: CustomIngredientSubscriptionWhereInput): CustomIngredientSubscriptionPayload
  ingredientList(where: IngredientListSubscriptionWhereInput): IngredientListSubscriptionPayload
  favoriteFood(where: FavoriteFoodSubscriptionWhereInput): FavoriteFoodSubscriptionPayload
  weightLog(where: WeightLogSubscriptionWhereInput): WeightLogSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
  profile: Profile
  daily_records(where: DailyRecordWhereInput, orderBy: DailyRecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DailyRecord!]
  custom_recipes(where: CustomRecipeWhereInput, orderBy: CustomRecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CustomRecipe!]
  custom_ingredients(where: CustomIngredientWhereInput, orderBy: CustomIngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CustomIngredient!]
  ingredient_list(where: IngredientListWhereInput, orderBy: IngredientListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [IngredientList!]
  favorites(where: FavoriteFoodWhereInput, orderBy: FavoriteFoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FavoriteFood!]
  weight_logs(where: WeightLogWhereInput, orderBy: WeightLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WeightLog!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  profile: ProfileCreateOneWithoutUserInput
  daily_records: DailyRecordCreateManyWithoutUserInput
  custom_recipes: CustomRecipeCreateManyWithoutUserInput
  custom_ingredients: CustomIngredientCreateManyWithoutUserInput
  ingredient_list: IngredientListCreateManyWithoutUserInput
  favorites: FavoriteFoodCreateManyWithoutUserInput
  weight_logs: WeightLogCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCustom_ingredientsInput {
  create: UserCreateWithoutCustom_ingredientsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCustom_recipesInput {
  create: UserCreateWithoutCustom_recipesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutDaily_recordsInput {
  create: UserCreateWithoutDaily_recordsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFavoritesInput {
  create: UserCreateWithoutFavoritesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutIngredient_listInput {
  create: UserCreateWithoutIngredient_listInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutWeight_logsInput {
  create: UserCreateWithoutWeight_logsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  profile: ProfileCreateOneWithoutUserInput
  daily_records: DailyRecordCreateManyWithoutUserInput
  custom_recipes: CustomRecipeCreateManyWithoutUserInput
  custom_ingredients: CustomIngredientCreateManyWithoutUserInput
  ingredient_list: IngredientListCreateManyWithoutUserInput
  favorites: FavoriteFoodCreateManyWithoutUserInput
  weight_logs: WeightLogCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
}

input UserCreateWithoutCustom_ingredientsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  profile: ProfileCreateOneWithoutUserInput
  daily_records: DailyRecordCreateManyWithoutUserInput
  custom_recipes: CustomRecipeCreateManyWithoutUserInput
  ingredient_list: IngredientListCreateManyWithoutUserInput
  favorites: FavoriteFoodCreateManyWithoutUserInput
  weight_logs: WeightLogCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
}

input UserCreateWithoutCustom_recipesInput {
  id: ID
  name: String!
  email: String!
  password: String!
  profile: ProfileCreateOneWithoutUserInput
  daily_records: DailyRecordCreateManyWithoutUserInput
  custom_ingredients: CustomIngredientCreateManyWithoutUserInput
  ingredient_list: IngredientListCreateManyWithoutUserInput
  favorites: FavoriteFoodCreateManyWithoutUserInput
  weight_logs: WeightLogCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
}

input UserCreateWithoutDaily_recordsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  profile: ProfileCreateOneWithoutUserInput
  custom_recipes: CustomRecipeCreateManyWithoutUserInput
  custom_ingredients: CustomIngredientCreateManyWithoutUserInput
  ingredient_list: IngredientListCreateManyWithoutUserInput
  favorites: FavoriteFoodCreateManyWithoutUserInput
  weight_logs: WeightLogCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
}

input UserCreateWithoutFavoritesInput {
  id: ID
  name: String!
  email: String!
  password: String!
  profile: ProfileCreateOneWithoutUserInput
  daily_records: DailyRecordCreateManyWithoutUserInput
  custom_recipes: CustomRecipeCreateManyWithoutUserInput
  custom_ingredients: CustomIngredientCreateManyWithoutUserInput
  ingredient_list: IngredientListCreateManyWithoutUserInput
  weight_logs: WeightLogCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
}

input UserCreateWithoutIngredient_listInput {
  id: ID
  name: String!
  email: String!
  password: String!
  profile: ProfileCreateOneWithoutUserInput
  daily_records: DailyRecordCreateManyWithoutUserInput
  custom_recipes: CustomRecipeCreateManyWithoutUserInput
  custom_ingredients: CustomIngredientCreateManyWithoutUserInput
  favorites: FavoriteFoodCreateManyWithoutUserInput
  weight_logs: WeightLogCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
}

input UserCreateWithoutPostsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  profile: ProfileCreateOneWithoutUserInput
  daily_records: DailyRecordCreateManyWithoutUserInput
  custom_recipes: CustomRecipeCreateManyWithoutUserInput
  custom_ingredients: CustomIngredientCreateManyWithoutUserInput
  ingredient_list: IngredientListCreateManyWithoutUserInput
  favorites: FavoriteFoodCreateManyWithoutUserInput
  weight_logs: WeightLogCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
}

input UserCreateWithoutProfileInput {
  id: ID
  name: String!
  email: String!
  password: String!
  daily_records: DailyRecordCreateManyWithoutUserInput
  custom_recipes: CustomRecipeCreateManyWithoutUserInput
  custom_ingredients: CustomIngredientCreateManyWithoutUserInput
  ingredient_list: IngredientListCreateManyWithoutUserInput
  favorites: FavoriteFoodCreateManyWithoutUserInput
  weight_logs: WeightLogCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
}

input UserCreateWithoutWeight_logsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  profile: ProfileCreateOneWithoutUserInput
  daily_records: DailyRecordCreateManyWithoutUserInput
  custom_recipes: CustomRecipeCreateManyWithoutUserInput
  custom_ingredients: CustomIngredientCreateManyWithoutUserInput
  ingredient_list: IngredientListCreateManyWithoutUserInput
  favorites: FavoriteFoodCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  profile: ProfileUpdateOneWithoutUserInput
  daily_records: DailyRecordUpdateManyWithoutUserInput
  custom_recipes: CustomRecipeUpdateManyWithoutUserInput
  custom_ingredients: CustomIngredientUpdateManyWithoutUserInput
  ingredient_list: IngredientListUpdateManyWithoutUserInput
  favorites: FavoriteFoodUpdateManyWithoutUserInput
  weight_logs: WeightLogUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutCustom_ingredientsInput {
  create: UserCreateWithoutCustom_ingredientsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCustom_ingredientsDataInput
  upsert: UserUpsertWithoutCustom_ingredientsInput
}

input UserUpdateOneRequiredWithoutCustom_recipesInput {
  create: UserCreateWithoutCustom_recipesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCustom_recipesDataInput
  upsert: UserUpsertWithoutCustom_recipesInput
}

input UserUpdateOneRequiredWithoutDaily_recordsInput {
  create: UserCreateWithoutDaily_recordsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutDaily_recordsDataInput
  upsert: UserUpsertWithoutDaily_recordsInput
}

input UserUpdateOneRequiredWithoutFavoritesInput {
  create: UserCreateWithoutFavoritesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutFavoritesDataInput
  upsert: UserUpsertWithoutFavoritesInput
}

input UserUpdateOneRequiredWithoutIngredient_listInput {
  create: UserCreateWithoutIngredient_listInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutIngredient_listDataInput
  upsert: UserUpsertWithoutIngredient_listInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneRequiredWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutProfileDataInput
  upsert: UserUpsertWithoutProfileInput
}

input UserUpdateOneRequiredWithoutWeight_logsInput {
  create: UserCreateWithoutWeight_logsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutWeight_logsDataInput
  upsert: UserUpsertWithoutWeight_logsInput
}

input UserUpdateWithoutCommentsDataInput {
  name: String
  email: String
  password: String
  profile: ProfileUpdateOneWithoutUserInput
  daily_records: DailyRecordUpdateManyWithoutUserInput
  custom_recipes: CustomRecipeUpdateManyWithoutUserInput
  custom_ingredients: CustomIngredientUpdateManyWithoutUserInput
  ingredient_list: IngredientListUpdateManyWithoutUserInput
  favorites: FavoriteFoodUpdateManyWithoutUserInput
  weight_logs: WeightLogUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
}

input UserUpdateWithoutCustom_ingredientsDataInput {
  name: String
  email: String
  password: String
  profile: ProfileUpdateOneWithoutUserInput
  daily_records: DailyRecordUpdateManyWithoutUserInput
  custom_recipes: CustomRecipeUpdateManyWithoutUserInput
  ingredient_list: IngredientListUpdateManyWithoutUserInput
  favorites: FavoriteFoodUpdateManyWithoutUserInput
  weight_logs: WeightLogUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
}

input UserUpdateWithoutCustom_recipesDataInput {
  name: String
  email: String
  password: String
  profile: ProfileUpdateOneWithoutUserInput
  daily_records: DailyRecordUpdateManyWithoutUserInput
  custom_ingredients: CustomIngredientUpdateManyWithoutUserInput
  ingredient_list: IngredientListUpdateManyWithoutUserInput
  favorites: FavoriteFoodUpdateManyWithoutUserInput
  weight_logs: WeightLogUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
}

input UserUpdateWithoutDaily_recordsDataInput {
  name: String
  email: String
  password: String
  profile: ProfileUpdateOneWithoutUserInput
  custom_recipes: CustomRecipeUpdateManyWithoutUserInput
  custom_ingredients: CustomIngredientUpdateManyWithoutUserInput
  ingredient_list: IngredientListUpdateManyWithoutUserInput
  favorites: FavoriteFoodUpdateManyWithoutUserInput
  weight_logs: WeightLogUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
}

input UserUpdateWithoutFavoritesDataInput {
  name: String
  email: String
  password: String
  profile: ProfileUpdateOneWithoutUserInput
  daily_records: DailyRecordUpdateManyWithoutUserInput
  custom_recipes: CustomRecipeUpdateManyWithoutUserInput
  custom_ingredients: CustomIngredientUpdateManyWithoutUserInput
  ingredient_list: IngredientListUpdateManyWithoutUserInput
  weight_logs: WeightLogUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
}

input UserUpdateWithoutIngredient_listDataInput {
  name: String
  email: String
  password: String
  profile: ProfileUpdateOneWithoutUserInput
  daily_records: DailyRecordUpdateManyWithoutUserInput
  custom_recipes: CustomRecipeUpdateManyWithoutUserInput
  custom_ingredients: CustomIngredientUpdateManyWithoutUserInput
  favorites: FavoriteFoodUpdateManyWithoutUserInput
  weight_logs: WeightLogUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
}

input UserUpdateWithoutPostsDataInput {
  name: String
  email: String
  password: String
  profile: ProfileUpdateOneWithoutUserInput
  daily_records: DailyRecordUpdateManyWithoutUserInput
  custom_recipes: CustomRecipeUpdateManyWithoutUserInput
  custom_ingredients: CustomIngredientUpdateManyWithoutUserInput
  ingredient_list: IngredientListUpdateManyWithoutUserInput
  favorites: FavoriteFoodUpdateManyWithoutUserInput
  weight_logs: WeightLogUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
}

input UserUpdateWithoutProfileDataInput {
  name: String
  email: String
  password: String
  daily_records: DailyRecordUpdateManyWithoutUserInput
  custom_recipes: CustomRecipeUpdateManyWithoutUserInput
  custom_ingredients: CustomIngredientUpdateManyWithoutUserInput
  ingredient_list: IngredientListUpdateManyWithoutUserInput
  favorites: FavoriteFoodUpdateManyWithoutUserInput
  weight_logs: WeightLogUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
}

input UserUpdateWithoutWeight_logsDataInput {
  name: String
  email: String
  password: String
  profile: ProfileUpdateOneWithoutUserInput
  daily_records: DailyRecordUpdateManyWithoutUserInput
  custom_recipes: CustomRecipeUpdateManyWithoutUserInput
  custom_ingredients: CustomIngredientUpdateManyWithoutUserInput
  ingredient_list: IngredientListUpdateManyWithoutUserInput
  favorites: FavoriteFoodUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutCustom_ingredientsInput {
  update: UserUpdateWithoutCustom_ingredientsDataInput!
  create: UserCreateWithoutCustom_ingredientsInput!
}

input UserUpsertWithoutCustom_recipesInput {
  update: UserUpdateWithoutCustom_recipesDataInput!
  create: UserCreateWithoutCustom_recipesInput!
}

input UserUpsertWithoutDaily_recordsInput {
  update: UserUpdateWithoutDaily_recordsDataInput!
  create: UserCreateWithoutDaily_recordsInput!
}

input UserUpsertWithoutFavoritesInput {
  update: UserUpdateWithoutFavoritesDataInput!
  create: UserCreateWithoutFavoritesInput!
}

input UserUpsertWithoutIngredient_listInput {
  update: UserUpdateWithoutIngredient_listDataInput!
  create: UserCreateWithoutIngredient_listInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithoutProfileInput {
  update: UserUpdateWithoutProfileDataInput!
  create: UserCreateWithoutProfileInput!
}

input UserUpsertWithoutWeight_logsInput {
  update: UserUpdateWithoutWeight_logsDataInput!
  create: UserCreateWithoutWeight_logsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  profile: ProfileWhereInput
  daily_records_every: DailyRecordWhereInput
  daily_records_some: DailyRecordWhereInput
  daily_records_none: DailyRecordWhereInput
  custom_recipes_every: CustomRecipeWhereInput
  custom_recipes_some: CustomRecipeWhereInput
  custom_recipes_none: CustomRecipeWhereInput
  custom_ingredients_every: CustomIngredientWhereInput
  custom_ingredients_some: CustomIngredientWhereInput
  custom_ingredients_none: CustomIngredientWhereInput
  ingredient_list_every: IngredientListWhereInput
  ingredient_list_some: IngredientListWhereInput
  ingredient_list_none: IngredientListWhereInput
  favorites_every: FavoriteFoodWhereInput
  favorites_some: FavoriteFoodWhereInput
  favorites_none: FavoriteFoodWhereInput
  weight_logs_every: WeightLogWhereInput
  weight_logs_some: WeightLogWhereInput
  weight_logs_none: WeightLogWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type WeightLog implements Node {
  id: ID!
  date: String!
  user_id: String!
  current_weight: Int!
  user: User!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type WeightLogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WeightLogEdge]!
  aggregate: AggregateWeightLog!
}

input WeightLogCreateInput {
  id: ID
  date: String!
  user_id: String!
  current_weight: Int!
  user: UserCreateOneWithoutWeight_logsInput!
}

input WeightLogCreateManyWithoutUserInput {
  create: [WeightLogCreateWithoutUserInput!]
  connect: [WeightLogWhereUniqueInput!]
}

input WeightLogCreateWithoutUserInput {
  id: ID
  date: String!
  user_id: String!
  current_weight: Int!
}

"""An edge in a connection."""
type WeightLogEdge {
  """The item at the end of the edge."""
  node: WeightLog!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WeightLogOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  user_id_ASC
  user_id_DESC
  current_weight_ASC
  current_weight_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WeightLogPreviousValues {
  id: ID!
  date: String!
  user_id: String!
  current_weight: Int!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input WeightLogScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [WeightLogScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [WeightLogScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WeightLogScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  date: String

  """All values that are not equal to given value."""
  date_not: String

  """All values that are contained in given list."""
  date_in: [String!]

  """All values that are not contained in given list."""
  date_not_in: [String!]

  """All values less than the given value."""
  date_lt: String

  """All values less than or equal the given value."""
  date_lte: String

  """All values greater than the given value."""
  date_gt: String

  """All values greater than or equal the given value."""
  date_gte: String

  """All values containing the given string."""
  date_contains: String

  """All values not containing the given string."""
  date_not_contains: String

  """All values starting with the given string."""
  date_starts_with: String

  """All values not starting with the given string."""
  date_not_starts_with: String

  """All values ending with the given string."""
  date_ends_with: String

  """All values not ending with the given string."""
  date_not_ends_with: String
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  current_weight: Int

  """All values that are not equal to given value."""
  current_weight_not: Int

  """All values that are contained in given list."""
  current_weight_in: [Int!]

  """All values that are not contained in given list."""
  current_weight_not_in: [Int!]

  """All values less than the given value."""
  current_weight_lt: Int

  """All values less than or equal the given value."""
  current_weight_lte: Int

  """All values greater than the given value."""
  current_weight_gt: Int

  """All values greater than or equal the given value."""
  current_weight_gte: Int
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type WeightLogSubscriptionPayload {
  mutation: MutationType!
  node: WeightLog
  updatedFields: [String!]
  previousValues: WeightLogPreviousValues
}

input WeightLogSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WeightLogSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WeightLogSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WeightLogSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WeightLogWhereInput
}

input WeightLogUpdateInput {
  date: String
  user_id: String
  current_weight: Int
  user: UserUpdateOneRequiredWithoutWeight_logsInput
}

input WeightLogUpdateManyDataInput {
  date: String
  user_id: String
  current_weight: Int
}

input WeightLogUpdateManyMutationInput {
  date: String
  user_id: String
  current_weight: Int
}

input WeightLogUpdateManyWithoutUserInput {
  create: [WeightLogCreateWithoutUserInput!]
  connect: [WeightLogWhereUniqueInput!]
  set: [WeightLogWhereUniqueInput!]
  disconnect: [WeightLogWhereUniqueInput!]
  delete: [WeightLogWhereUniqueInput!]
  update: [WeightLogUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [WeightLogUpdateManyWithWhereNestedInput!]
  deleteMany: [WeightLogScalarWhereInput!]
  upsert: [WeightLogUpsertWithWhereUniqueWithoutUserInput!]
}

input WeightLogUpdateManyWithWhereNestedInput {
  where: WeightLogScalarWhereInput!
  data: WeightLogUpdateManyDataInput!
}

input WeightLogUpdateWithoutUserDataInput {
  date: String
  user_id: String
  current_weight: Int
}

input WeightLogUpdateWithWhereUniqueWithoutUserInput {
  where: WeightLogWhereUniqueInput!
  data: WeightLogUpdateWithoutUserDataInput!
}

input WeightLogUpsertWithWhereUniqueWithoutUserInput {
  where: WeightLogWhereUniqueInput!
  update: WeightLogUpdateWithoutUserDataInput!
  create: WeightLogCreateWithoutUserInput!
}

input WeightLogWhereInput {
  """Logical AND on all given filters."""
  AND: [WeightLogWhereInput!]

  """Logical OR on all given filters."""
  OR: [WeightLogWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WeightLogWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  date: String

  """All values that are not equal to given value."""
  date_not: String

  """All values that are contained in given list."""
  date_in: [String!]

  """All values that are not contained in given list."""
  date_not_in: [String!]

  """All values less than the given value."""
  date_lt: String

  """All values less than or equal the given value."""
  date_lte: String

  """All values greater than the given value."""
  date_gt: String

  """All values greater than or equal the given value."""
  date_gte: String

  """All values containing the given string."""
  date_contains: String

  """All values not containing the given string."""
  date_not_contains: String

  """All values starting with the given string."""
  date_starts_with: String

  """All values not starting with the given string."""
  date_not_starts_with: String

  """All values ending with the given string."""
  date_ends_with: String

  """All values not ending with the given string."""
  date_not_ends_with: String
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  current_weight: Int

  """All values that are not equal to given value."""
  current_weight_not: Int

  """All values that are contained in given list."""
  current_weight_in: [Int!]

  """All values that are not contained in given list."""
  current_weight_not_in: [Int!]

  """All values less than the given value."""
  current_weight_lt: Int

  """All values less than or equal the given value."""
  current_weight_lte: Int

  """All values greater than the given value."""
  current_weight_gt: Int

  """All values greater than or equal the given value."""
  current_weight_gte: Int
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  user: UserWhereInput
}

input WeightLogWhereUniqueInput {
  id: ID
}
