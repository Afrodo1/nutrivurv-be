# import UserOrderByInput from './generated/prisma.graphql'

type Query {
  users(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: UserOrderByInput
  ): [User!]
  me: User!
  myProfile: Profile
  myDailyRecords: [DailyRecord!]
  todaysRecords: [DailyRecord!]
  user(id: String!): User
  myRecipes: [CustomRecipe!]
  recipe(id: String!): CustomRecipe
  ingredient(id: String!): CustomIngredient
  myIngredients: [CustomIngredient!]
  profiles: [Profile!]
  myDailyRecordCount: Int!
  myFavoriteFoods: [FavoriteFood!]
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  login(data: LoginUserInput!): AuthPayload!
  deleteUser: User!
  updateUser(data: UpdateUserInput!): User!
  createProfile(data: CreateProfileInput!): Profile!
  updateProfile(data: UpdateProfileInput!): Profile!
  deleteProfile: Profile!
  createDailyRecord(data: CreateDailyRecordInput!): DailyRecord!
  updateDailyRecord(id: String!, data: UpdateDailyRecordInput!): DailyRecord!
  deleteDailyRecord(id: String!): DailyRecord!
  createCustomRecipe(data: CreateCustomRecipeInput!): CustomRecipe!
  updateCustomRecipe(id: String!, data: UpdateCustomRecipeInput!): CustomRecipe!
  deleteCustomRecipe(id: String!): CustomRecipe!
  createCustomIngredient(data: CreateCustomIngredientInput!): CustomIngredient!
  updateCustomIngredient(
    id: String!
    data: UpdateCustomIngredientInput!
  ): CustomIngredient!
  deleteCustomIngredient(id: String!): CustomIngredient!
  createIngredientList(data: createIngredientListInput!): IngredientList!
  updateIngredientList(
    id: String!
    data: updateIngredientListInput!
  ): IngredientList!
  deleteIngredientList(id: String!): IngredientList!
  createFavoriteFood(data: CreateFavoriteFoodInput): FavoriteFood!
  updateFavoriteFood(id: String! data: UpdateFavoriteFoodInput!): FavoriteFood!
  deleteFavoriteFood(id: String!): FavoriteFood!
}

# type Subscription {

# }

type AuthPayload {
  token: String!
  user: User!
}

input UpdateDailyRecordInput {
  date: String
  current_weight: Int
  calories: Int
  fat: Int
  carbs: Int
  fiber: Int
  protein: Int
  food_string: String
  meal_type: String
}

input UpdateProfileInput {
  age: Int
  weight: Int
  height: Int
  gender: Boolean
  goal_weight: Int
  activity_level: Int
  diet: String
  fat: Int
  carbs: Int
  protein: Int
  fiber: Int
  calories: Int
}

input CreateDailyRecordInput {
  date: String!
  current_weight: Int!
  calories: Int!
  fat: Int!
  carbs: Int!
  fiber: Int!
  protein: Int!
  food_string: String!
  meal_type: String!
}

input CreateProfileInput {
  age: Int!
  weight: Int!
  height: Int!
  gender: Boolean
  goal_weight: Int
  activity_level: Int
  diet: String
  fat: Int
  carbs: Int
  protein: Int
  fiber: Int
  calories: Int
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input CreateCustomRecipeInput {
  portions: Int!
  name: String!
}

input UpdateCustomRecipeInput {
  name: String
  portions: Int
}

input createIngredientListInput {
  recipe_id: String!
  ingredient_id: String!
  custom: Boolean!
  amount: Float!
  unit: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
}

input updateIngredientListInput {
  amount: Float
  unit: String
}

type User {
  id: ID!
  name: String!
  email: String
  updatedAt: String!
  createdAt: String!
  profile: Profile
  favorites: [FavoriteFood!]
  dailyRecords: [DailyRecord!]
}

type Profile {
  id: ID!
  age: Int!
  weight: Int!
  height: Int!
  gender: Boolean
  goal_weight: Int
  activity_level: Int
  diet: String
  fat: Int
  carbs: Int
  protein: Int
  fiber: Int
  calories: Int
  updatedAt: String!
  createdAt: String!
}

type DailyRecord {
  id: ID!
  date: String!
  current_weight: Int!
  calories: Int!
  fat: Int!
  carbs: Int!
  fiber: Int!
  protein: Int!
  food_string: String!
  meal_type: String!
  updatedAt: String!
  createdAt: String!
}

type CustomRecipe {
  id: ID!
  portions: Int!
  name: String!
  ingredient_list: [IngredientList!]
  updatedAt: String!
  createdAt: String!
}

type CustomIngredient {
  id: ID!
  name: String!
  description: String!
  fat: Int!
  carbs: Int!
  protein: Int!
  fiber: Int!
  calories: Int!
  updatedAt: String!
  createdAt: String!
}

type IngredientList {
  id: ID!
  ingredient_id: String!
  custom: Boolean!
  amount: Float!
  unit: String!
  updatedAt: String!
  createdAt: String!
}

input CreateCustomIngredientInput {
  name: String!
  description: String!
  fat: Int!
  carbs: Int!
  protein: Int!
  fiber: Int!
  calories: Int!
}

input UpdateCustomIngredientInput {
  name: String
  description: String
  fat: Int
  carbs: Int
  protein: Int
  fiber: Int
  calories: Int
}

type FavoriteFood {
  id: ID!
  food_id: String!
  custom: Boolean!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input CreateFavoriteFoodInput {
  food_id: String!
  custom: Boolean!
}

input UpdateFavoriteFoodInput {
  food_id: String
  custom: Boolean
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}
