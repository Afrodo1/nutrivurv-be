// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  customIngredient: (where?: CustomIngredientWhereInput) => Promise<boolean>;
  customRecipe: (where?: CustomRecipeWhereInput) => Promise<boolean>;
  dailyRecord: (where?: DailyRecordWhereInput) => Promise<boolean>;
  favoriteFood: (where?: FavoriteFoodWhereInput) => Promise<boolean>;
  ingredientList: (where?: IngredientListWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  profile: (where?: ProfileWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  weightLog: (where?: WeightLogWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  customIngredient: (
    where: CustomIngredientWhereUniqueInput
  ) => CustomIngredientNullablePromise;
  customIngredients: (args?: {
    where?: CustomIngredientWhereInput;
    orderBy?: CustomIngredientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CustomIngredient>;
  customIngredientsConnection: (args?: {
    where?: CustomIngredientWhereInput;
    orderBy?: CustomIngredientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CustomIngredientConnectionPromise;
  customRecipe: (
    where: CustomRecipeWhereUniqueInput
  ) => CustomRecipeNullablePromise;
  customRecipes: (args?: {
    where?: CustomRecipeWhereInput;
    orderBy?: CustomRecipeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CustomRecipe>;
  customRecipesConnection: (args?: {
    where?: CustomRecipeWhereInput;
    orderBy?: CustomRecipeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CustomRecipeConnectionPromise;
  dailyRecord: (
    where: DailyRecordWhereUniqueInput
  ) => DailyRecordNullablePromise;
  dailyRecords: (args?: {
    where?: DailyRecordWhereInput;
    orderBy?: DailyRecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<DailyRecord>;
  dailyRecordsConnection: (args?: {
    where?: DailyRecordWhereInput;
    orderBy?: DailyRecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DailyRecordConnectionPromise;
  favoriteFood: (
    where: FavoriteFoodWhereUniqueInput
  ) => FavoriteFoodNullablePromise;
  favoriteFoods: (args?: {
    where?: FavoriteFoodWhereInput;
    orderBy?: FavoriteFoodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FavoriteFood>;
  favoriteFoodsConnection: (args?: {
    where?: FavoriteFoodWhereInput;
    orderBy?: FavoriteFoodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FavoriteFoodConnectionPromise;
  ingredientList: (
    where: IngredientListWhereUniqueInput
  ) => IngredientListNullablePromise;
  ingredientLists: (args?: {
    where?: IngredientListWhereInput;
    orderBy?: IngredientListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<IngredientList>;
  ingredientListsConnection: (args?: {
    where?: IngredientListWhereInput;
    orderBy?: IngredientListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => IngredientListConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  profile: (where: ProfileWhereUniqueInput) => ProfileNullablePromise;
  profiles: (args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Profile>;
  profilesConnection: (args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProfileConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  weightLog: (where: WeightLogWhereUniqueInput) => WeightLogNullablePromise;
  weightLogs: (args?: {
    where?: WeightLogWhereInput;
    orderBy?: WeightLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WeightLog>;
  weightLogsConnection: (args?: {
    where?: WeightLogWhereInput;
    orderBy?: WeightLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WeightLogConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createCustomIngredient: (
    data: CustomIngredientCreateInput
  ) => CustomIngredientPromise;
  updateCustomIngredient: (args: {
    data: CustomIngredientUpdateInput;
    where: CustomIngredientWhereUniqueInput;
  }) => CustomIngredientPromise;
  updateManyCustomIngredients: (args: {
    data: CustomIngredientUpdateManyMutationInput;
    where?: CustomIngredientWhereInput;
  }) => BatchPayloadPromise;
  upsertCustomIngredient: (args: {
    where: CustomIngredientWhereUniqueInput;
    create: CustomIngredientCreateInput;
    update: CustomIngredientUpdateInput;
  }) => CustomIngredientPromise;
  deleteCustomIngredient: (
    where: CustomIngredientWhereUniqueInput
  ) => CustomIngredientPromise;
  deleteManyCustomIngredients: (
    where?: CustomIngredientWhereInput
  ) => BatchPayloadPromise;
  createCustomRecipe: (data: CustomRecipeCreateInput) => CustomRecipePromise;
  updateCustomRecipe: (args: {
    data: CustomRecipeUpdateInput;
    where: CustomRecipeWhereUniqueInput;
  }) => CustomRecipePromise;
  updateManyCustomRecipes: (args: {
    data: CustomRecipeUpdateManyMutationInput;
    where?: CustomRecipeWhereInput;
  }) => BatchPayloadPromise;
  upsertCustomRecipe: (args: {
    where: CustomRecipeWhereUniqueInput;
    create: CustomRecipeCreateInput;
    update: CustomRecipeUpdateInput;
  }) => CustomRecipePromise;
  deleteCustomRecipe: (
    where: CustomRecipeWhereUniqueInput
  ) => CustomRecipePromise;
  deleteManyCustomRecipes: (
    where?: CustomRecipeWhereInput
  ) => BatchPayloadPromise;
  createDailyRecord: (data: DailyRecordCreateInput) => DailyRecordPromise;
  updateDailyRecord: (args: {
    data: DailyRecordUpdateInput;
    where: DailyRecordWhereUniqueInput;
  }) => DailyRecordPromise;
  updateManyDailyRecords: (args: {
    data: DailyRecordUpdateManyMutationInput;
    where?: DailyRecordWhereInput;
  }) => BatchPayloadPromise;
  upsertDailyRecord: (args: {
    where: DailyRecordWhereUniqueInput;
    create: DailyRecordCreateInput;
    update: DailyRecordUpdateInput;
  }) => DailyRecordPromise;
  deleteDailyRecord: (where: DailyRecordWhereUniqueInput) => DailyRecordPromise;
  deleteManyDailyRecords: (
    where?: DailyRecordWhereInput
  ) => BatchPayloadPromise;
  createFavoriteFood: (data: FavoriteFoodCreateInput) => FavoriteFoodPromise;
  updateFavoriteFood: (args: {
    data: FavoriteFoodUpdateInput;
    where: FavoriteFoodWhereUniqueInput;
  }) => FavoriteFoodPromise;
  updateManyFavoriteFoods: (args: {
    data: FavoriteFoodUpdateManyMutationInput;
    where?: FavoriteFoodWhereInput;
  }) => BatchPayloadPromise;
  upsertFavoriteFood: (args: {
    where: FavoriteFoodWhereUniqueInput;
    create: FavoriteFoodCreateInput;
    update: FavoriteFoodUpdateInput;
  }) => FavoriteFoodPromise;
  deleteFavoriteFood: (
    where: FavoriteFoodWhereUniqueInput
  ) => FavoriteFoodPromise;
  deleteManyFavoriteFoods: (
    where?: FavoriteFoodWhereInput
  ) => BatchPayloadPromise;
  createIngredientList: (
    data: IngredientListCreateInput
  ) => IngredientListPromise;
  updateIngredientList: (args: {
    data: IngredientListUpdateInput;
    where: IngredientListWhereUniqueInput;
  }) => IngredientListPromise;
  updateManyIngredientLists: (args: {
    data: IngredientListUpdateManyMutationInput;
    where?: IngredientListWhereInput;
  }) => BatchPayloadPromise;
  upsertIngredientList: (args: {
    where: IngredientListWhereUniqueInput;
    create: IngredientListCreateInput;
    update: IngredientListUpdateInput;
  }) => IngredientListPromise;
  deleteIngredientList: (
    where: IngredientListWhereUniqueInput
  ) => IngredientListPromise;
  deleteManyIngredientLists: (
    where?: IngredientListWhereInput
  ) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createProfile: (data: ProfileCreateInput) => ProfilePromise;
  updateProfile: (args: {
    data: ProfileUpdateInput;
    where: ProfileWhereUniqueInput;
  }) => ProfilePromise;
  updateManyProfiles: (args: {
    data: ProfileUpdateManyMutationInput;
    where?: ProfileWhereInput;
  }) => BatchPayloadPromise;
  upsertProfile: (args: {
    where: ProfileWhereUniqueInput;
    create: ProfileCreateInput;
    update: ProfileUpdateInput;
  }) => ProfilePromise;
  deleteProfile: (where: ProfileWhereUniqueInput) => ProfilePromise;
  deleteManyProfiles: (where?: ProfileWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createWeightLog: (data: WeightLogCreateInput) => WeightLogPromise;
  updateWeightLog: (args: {
    data: WeightLogUpdateInput;
    where: WeightLogWhereUniqueInput;
  }) => WeightLogPromise;
  updateManyWeightLogs: (args: {
    data: WeightLogUpdateManyMutationInput;
    where?: WeightLogWhereInput;
  }) => BatchPayloadPromise;
  upsertWeightLog: (args: {
    where: WeightLogWhereUniqueInput;
    create: WeightLogCreateInput;
    update: WeightLogUpdateInput;
  }) => WeightLogPromise;
  deleteWeightLog: (where: WeightLogWhereUniqueInput) => WeightLogPromise;
  deleteManyWeightLogs: (where?: WeightLogWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  customIngredient: (
    where?: CustomIngredientSubscriptionWhereInput
  ) => CustomIngredientSubscriptionPayloadSubscription;
  customRecipe: (
    where?: CustomRecipeSubscriptionWhereInput
  ) => CustomRecipeSubscriptionPayloadSubscription;
  dailyRecord: (
    where?: DailyRecordSubscriptionWhereInput
  ) => DailyRecordSubscriptionPayloadSubscription;
  favoriteFood: (
    where?: FavoriteFoodSubscriptionWhereInput
  ) => FavoriteFoodSubscriptionPayloadSubscription;
  ingredientList: (
    where?: IngredientListSubscriptionWhereInput
  ) => IngredientListSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  profile: (
    where?: ProfileSubscriptionWhereInput
  ) => ProfileSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  weightLog: (
    where?: WeightLogSubscriptionWhereInput
  ) => WeightLogSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type DailyRecordOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "user_id_ASC"
  | "user_id_DESC"
  | "date_ASC"
  | "date_DESC"
  | "calories_ASC"
  | "calories_DESC"
  | "fat_ASC"
  | "fat_DESC"
  | "carbs_ASC"
  | "carbs_DESC"
  | "fiber_ASC"
  | "fiber_DESC"
  | "protein_ASC"
  | "protein_DESC"
  | "food_string_ASC"
  | "food_string_DESC"
  | "meal_type_ASC"
  | "meal_type_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type CustomRecipeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "user_id_ASC"
  | "user_id_DESC"
  | "portions_ASC"
  | "portions_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type IngredientListOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "user_id_ASC"
  | "user_id_DESC"
  | "recipe_id_ASC"
  | "recipe_id_DESC"
  | "ingredient_id_ASC"
  | "ingredient_id_DESC"
  | "custom_ASC"
  | "custom_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "unit_ASC"
  | "unit_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type CustomIngredientOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "user_id_ASC"
  | "user_id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "fat_ASC"
  | "fat_DESC"
  | "carbs_ASC"
  | "carbs_DESC"
  | "protein_ASC"
  | "protein_DESC"
  | "fiber_ASC"
  | "fiber_DESC"
  | "calories_ASC"
  | "calories_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type FavoriteFoodOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "food_id_ASC"
  | "food_id_DESC"
  | "custom_ASC"
  | "custom_DESC"
  | "user_id_ASC"
  | "user_id_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type WeightLogOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "date_ASC"
  | "date_DESC"
  | "user_id_ASC"
  | "user_id_DESC"
  | "current_weight_ASC"
  | "current_weight_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "user_id_ASC"
  | "user_id_DESC"
  | "viewCount_ASC"
  | "viewCount_DESC"
  | "likeCount_ASC"
  | "likeCount_DESC"
  | "title_ASC"
  | "title_DESC"
  | "body_ASC"
  | "body_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "user_id_ASC"
  | "user_id_DESC"
  | "likeCount_ASC"
  | "likeCount_DESC"
  | "body_ASC"
  | "body_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ProfileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "user_id_ASC"
  | "user_id_DESC"
  | "age_ASC"
  | "age_DESC"
  | "weight_ASC"
  | "weight_DESC"
  | "height_ASC"
  | "height_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "goal_weight_ASC"
  | "goal_weight_DESC"
  | "activity_level_ASC"
  | "activity_level_DESC"
  | "diet_ASC"
  | "diet_DESC"
  | "fat_ASC"
  | "fat_DESC"
  | "carbs_ASC"
  | "carbs_DESC"
  | "protein_ASC"
  | "protein_DESC"
  | "fiber_ASC"
  | "fiber_DESC"
  | "calories_ASC"
  | "calories_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface DailyRecordWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  calories?: Maybe<Int>;
  calories_not?: Maybe<Int>;
  calories_in?: Maybe<Int[] | Int>;
  calories_not_in?: Maybe<Int[] | Int>;
  calories_lt?: Maybe<Int>;
  calories_lte?: Maybe<Int>;
  calories_gt?: Maybe<Int>;
  calories_gte?: Maybe<Int>;
  fat?: Maybe<Int>;
  fat_not?: Maybe<Int>;
  fat_in?: Maybe<Int[] | Int>;
  fat_not_in?: Maybe<Int[] | Int>;
  fat_lt?: Maybe<Int>;
  fat_lte?: Maybe<Int>;
  fat_gt?: Maybe<Int>;
  fat_gte?: Maybe<Int>;
  carbs?: Maybe<Int>;
  carbs_not?: Maybe<Int>;
  carbs_in?: Maybe<Int[] | Int>;
  carbs_not_in?: Maybe<Int[] | Int>;
  carbs_lt?: Maybe<Int>;
  carbs_lte?: Maybe<Int>;
  carbs_gt?: Maybe<Int>;
  carbs_gte?: Maybe<Int>;
  fiber?: Maybe<Int>;
  fiber_not?: Maybe<Int>;
  fiber_in?: Maybe<Int[] | Int>;
  fiber_not_in?: Maybe<Int[] | Int>;
  fiber_lt?: Maybe<Int>;
  fiber_lte?: Maybe<Int>;
  fiber_gt?: Maybe<Int>;
  fiber_gte?: Maybe<Int>;
  protein?: Maybe<Int>;
  protein_not?: Maybe<Int>;
  protein_in?: Maybe<Int[] | Int>;
  protein_not_in?: Maybe<Int[] | Int>;
  protein_lt?: Maybe<Int>;
  protein_lte?: Maybe<Int>;
  protein_gt?: Maybe<Int>;
  protein_gte?: Maybe<Int>;
  food_string?: Maybe<String>;
  food_string_not?: Maybe<String>;
  food_string_in?: Maybe<String[] | String>;
  food_string_not_in?: Maybe<String[] | String>;
  food_string_lt?: Maybe<String>;
  food_string_lte?: Maybe<String>;
  food_string_gt?: Maybe<String>;
  food_string_gte?: Maybe<String>;
  food_string_contains?: Maybe<String>;
  food_string_not_contains?: Maybe<String>;
  food_string_starts_with?: Maybe<String>;
  food_string_not_starts_with?: Maybe<String>;
  food_string_ends_with?: Maybe<String>;
  food_string_not_ends_with?: Maybe<String>;
  meal_type?: Maybe<String>;
  meal_type_not?: Maybe<String>;
  meal_type_in?: Maybe<String[] | String>;
  meal_type_not_in?: Maybe<String[] | String>;
  meal_type_lt?: Maybe<String>;
  meal_type_lte?: Maybe<String>;
  meal_type_gt?: Maybe<String>;
  meal_type_gte?: Maybe<String>;
  meal_type_contains?: Maybe<String>;
  meal_type_not_contains?: Maybe<String>;
  meal_type_starts_with?: Maybe<String>;
  meal_type_not_starts_with?: Maybe<String>;
  meal_type_ends_with?: Maybe<String>;
  meal_type_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<DailyRecordWhereInput[] | DailyRecordWhereInput>;
  OR?: Maybe<DailyRecordWhereInput[] | DailyRecordWhereInput>;
  NOT?: Maybe<DailyRecordWhereInput[] | DailyRecordWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  profile?: Maybe<ProfileWhereInput>;
  daily_records_every?: Maybe<DailyRecordWhereInput>;
  daily_records_some?: Maybe<DailyRecordWhereInput>;
  daily_records_none?: Maybe<DailyRecordWhereInput>;
  custom_recipes_every?: Maybe<CustomRecipeWhereInput>;
  custom_recipes_some?: Maybe<CustomRecipeWhereInput>;
  custom_recipes_none?: Maybe<CustomRecipeWhereInput>;
  custom_ingredients_every?: Maybe<CustomIngredientWhereInput>;
  custom_ingredients_some?: Maybe<CustomIngredientWhereInput>;
  custom_ingredients_none?: Maybe<CustomIngredientWhereInput>;
  ingredient_list_every?: Maybe<IngredientListWhereInput>;
  ingredient_list_some?: Maybe<IngredientListWhereInput>;
  ingredient_list_none?: Maybe<IngredientListWhereInput>;
  favorites_every?: Maybe<FavoriteFoodWhereInput>;
  favorites_some?: Maybe<FavoriteFoodWhereInput>;
  favorites_none?: Maybe<FavoriteFoodWhereInput>;
  weight_logs_every?: Maybe<WeightLogWhereInput>;
  weight_logs_some?: Maybe<WeightLogWhereInput>;
  weight_logs_none?: Maybe<WeightLogWhereInput>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ProfileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  age?: Maybe<Int>;
  age_not?: Maybe<Int>;
  age_in?: Maybe<Int[] | Int>;
  age_not_in?: Maybe<Int[] | Int>;
  age_lt?: Maybe<Int>;
  age_lte?: Maybe<Int>;
  age_gt?: Maybe<Int>;
  age_gte?: Maybe<Int>;
  weight?: Maybe<Int>;
  weight_not?: Maybe<Int>;
  weight_in?: Maybe<Int[] | Int>;
  weight_not_in?: Maybe<Int[] | Int>;
  weight_lt?: Maybe<Int>;
  weight_lte?: Maybe<Int>;
  weight_gt?: Maybe<Int>;
  weight_gte?: Maybe<Int>;
  height?: Maybe<Int>;
  height_not?: Maybe<Int>;
  height_in?: Maybe<Int[] | Int>;
  height_not_in?: Maybe<Int[] | Int>;
  height_lt?: Maybe<Int>;
  height_lte?: Maybe<Int>;
  height_gt?: Maybe<Int>;
  height_gte?: Maybe<Int>;
  gender?: Maybe<Boolean>;
  gender_not?: Maybe<Boolean>;
  goal_weight?: Maybe<Int>;
  goal_weight_not?: Maybe<Int>;
  goal_weight_in?: Maybe<Int[] | Int>;
  goal_weight_not_in?: Maybe<Int[] | Int>;
  goal_weight_lt?: Maybe<Int>;
  goal_weight_lte?: Maybe<Int>;
  goal_weight_gt?: Maybe<Int>;
  goal_weight_gte?: Maybe<Int>;
  activity_level?: Maybe<Int>;
  activity_level_not?: Maybe<Int>;
  activity_level_in?: Maybe<Int[] | Int>;
  activity_level_not_in?: Maybe<Int[] | Int>;
  activity_level_lt?: Maybe<Int>;
  activity_level_lte?: Maybe<Int>;
  activity_level_gt?: Maybe<Int>;
  activity_level_gte?: Maybe<Int>;
  diet?: Maybe<String>;
  diet_not?: Maybe<String>;
  diet_in?: Maybe<String[] | String>;
  diet_not_in?: Maybe<String[] | String>;
  diet_lt?: Maybe<String>;
  diet_lte?: Maybe<String>;
  diet_gt?: Maybe<String>;
  diet_gte?: Maybe<String>;
  diet_contains?: Maybe<String>;
  diet_not_contains?: Maybe<String>;
  diet_starts_with?: Maybe<String>;
  diet_not_starts_with?: Maybe<String>;
  diet_ends_with?: Maybe<String>;
  diet_not_ends_with?: Maybe<String>;
  fat?: Maybe<Int>;
  fat_not?: Maybe<Int>;
  fat_in?: Maybe<Int[] | Int>;
  fat_not_in?: Maybe<Int[] | Int>;
  fat_lt?: Maybe<Int>;
  fat_lte?: Maybe<Int>;
  fat_gt?: Maybe<Int>;
  fat_gte?: Maybe<Int>;
  carbs?: Maybe<Int>;
  carbs_not?: Maybe<Int>;
  carbs_in?: Maybe<Int[] | Int>;
  carbs_not_in?: Maybe<Int[] | Int>;
  carbs_lt?: Maybe<Int>;
  carbs_lte?: Maybe<Int>;
  carbs_gt?: Maybe<Int>;
  carbs_gte?: Maybe<Int>;
  protein?: Maybe<Int>;
  protein_not?: Maybe<Int>;
  protein_in?: Maybe<Int[] | Int>;
  protein_not_in?: Maybe<Int[] | Int>;
  protein_lt?: Maybe<Int>;
  protein_lte?: Maybe<Int>;
  protein_gt?: Maybe<Int>;
  protein_gte?: Maybe<Int>;
  fiber?: Maybe<Int>;
  fiber_not?: Maybe<Int>;
  fiber_in?: Maybe<Int[] | Int>;
  fiber_not_in?: Maybe<Int[] | Int>;
  fiber_lt?: Maybe<Int>;
  fiber_lte?: Maybe<Int>;
  fiber_gt?: Maybe<Int>;
  fiber_gte?: Maybe<Int>;
  calories?: Maybe<Int>;
  calories_not?: Maybe<Int>;
  calories_in?: Maybe<Int[] | Int>;
  calories_not_in?: Maybe<Int[] | Int>;
  calories_lt?: Maybe<Int>;
  calories_lte?: Maybe<Int>;
  calories_gt?: Maybe<Int>;
  calories_gte?: Maybe<Int>;
  user?: Maybe<UserWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
  OR?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
  NOT?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
}

export interface CustomRecipeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  portions?: Maybe<Int>;
  portions_not?: Maybe<Int>;
  portions_in?: Maybe<Int[] | Int>;
  portions_not_in?: Maybe<Int[] | Int>;
  portions_lt?: Maybe<Int>;
  portions_lte?: Maybe<Int>;
  portions_gt?: Maybe<Int>;
  portions_gte?: Maybe<Int>;
  user?: Maybe<UserWhereInput>;
  ingredient_list_every?: Maybe<IngredientListWhereInput>;
  ingredient_list_some?: Maybe<IngredientListWhereInput>;
  ingredient_list_none?: Maybe<IngredientListWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CustomRecipeWhereInput[] | CustomRecipeWhereInput>;
  OR?: Maybe<CustomRecipeWhereInput[] | CustomRecipeWhereInput>;
  NOT?: Maybe<CustomRecipeWhereInput[] | CustomRecipeWhereInput>;
}

export interface IngredientListWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  recipe_id?: Maybe<String>;
  recipe_id_not?: Maybe<String>;
  recipe_id_in?: Maybe<String[] | String>;
  recipe_id_not_in?: Maybe<String[] | String>;
  recipe_id_lt?: Maybe<String>;
  recipe_id_lte?: Maybe<String>;
  recipe_id_gt?: Maybe<String>;
  recipe_id_gte?: Maybe<String>;
  recipe_id_contains?: Maybe<String>;
  recipe_id_not_contains?: Maybe<String>;
  recipe_id_starts_with?: Maybe<String>;
  recipe_id_not_starts_with?: Maybe<String>;
  recipe_id_ends_with?: Maybe<String>;
  recipe_id_not_ends_with?: Maybe<String>;
  ingredient_id?: Maybe<String>;
  ingredient_id_not?: Maybe<String>;
  ingredient_id_in?: Maybe<String[] | String>;
  ingredient_id_not_in?: Maybe<String[] | String>;
  ingredient_id_lt?: Maybe<String>;
  ingredient_id_lte?: Maybe<String>;
  ingredient_id_gt?: Maybe<String>;
  ingredient_id_gte?: Maybe<String>;
  ingredient_id_contains?: Maybe<String>;
  ingredient_id_not_contains?: Maybe<String>;
  ingredient_id_starts_with?: Maybe<String>;
  ingredient_id_not_starts_with?: Maybe<String>;
  ingredient_id_ends_with?: Maybe<String>;
  ingredient_id_not_ends_with?: Maybe<String>;
  custom?: Maybe<Boolean>;
  custom_not?: Maybe<Boolean>;
  amount?: Maybe<Float>;
  amount_not?: Maybe<Float>;
  amount_in?: Maybe<Float[] | Float>;
  amount_not_in?: Maybe<Float[] | Float>;
  amount_lt?: Maybe<Float>;
  amount_lte?: Maybe<Float>;
  amount_gt?: Maybe<Float>;
  amount_gte?: Maybe<Float>;
  unit?: Maybe<String>;
  unit_not?: Maybe<String>;
  unit_in?: Maybe<String[] | String>;
  unit_not_in?: Maybe<String[] | String>;
  unit_lt?: Maybe<String>;
  unit_lte?: Maybe<String>;
  unit_gt?: Maybe<String>;
  unit_gte?: Maybe<String>;
  unit_contains?: Maybe<String>;
  unit_not_contains?: Maybe<String>;
  unit_starts_with?: Maybe<String>;
  unit_not_starts_with?: Maybe<String>;
  unit_ends_with?: Maybe<String>;
  unit_not_ends_with?: Maybe<String>;
  recipe?: Maybe<CustomRecipeWhereInput>;
  user?: Maybe<UserWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<IngredientListWhereInput[] | IngredientListWhereInput>;
  OR?: Maybe<IngredientListWhereInput[] | IngredientListWhereInput>;
  NOT?: Maybe<IngredientListWhereInput[] | IngredientListWhereInput>;
}

export interface CustomIngredientWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  fat?: Maybe<Int>;
  fat_not?: Maybe<Int>;
  fat_in?: Maybe<Int[] | Int>;
  fat_not_in?: Maybe<Int[] | Int>;
  fat_lt?: Maybe<Int>;
  fat_lte?: Maybe<Int>;
  fat_gt?: Maybe<Int>;
  fat_gte?: Maybe<Int>;
  carbs?: Maybe<Int>;
  carbs_not?: Maybe<Int>;
  carbs_in?: Maybe<Int[] | Int>;
  carbs_not_in?: Maybe<Int[] | Int>;
  carbs_lt?: Maybe<Int>;
  carbs_lte?: Maybe<Int>;
  carbs_gt?: Maybe<Int>;
  carbs_gte?: Maybe<Int>;
  protein?: Maybe<Int>;
  protein_not?: Maybe<Int>;
  protein_in?: Maybe<Int[] | Int>;
  protein_not_in?: Maybe<Int[] | Int>;
  protein_lt?: Maybe<Int>;
  protein_lte?: Maybe<Int>;
  protein_gt?: Maybe<Int>;
  protein_gte?: Maybe<Int>;
  fiber?: Maybe<Int>;
  fiber_not?: Maybe<Int>;
  fiber_in?: Maybe<Int[] | Int>;
  fiber_not_in?: Maybe<Int[] | Int>;
  fiber_lt?: Maybe<Int>;
  fiber_lte?: Maybe<Int>;
  fiber_gt?: Maybe<Int>;
  fiber_gte?: Maybe<Int>;
  calories?: Maybe<Int>;
  calories_not?: Maybe<Int>;
  calories_in?: Maybe<Int[] | Int>;
  calories_not_in?: Maybe<Int[] | Int>;
  calories_lt?: Maybe<Int>;
  calories_lte?: Maybe<Int>;
  calories_gt?: Maybe<Int>;
  calories_gte?: Maybe<Int>;
  user?: Maybe<UserWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CustomIngredientWhereInput[] | CustomIngredientWhereInput>;
  OR?: Maybe<CustomIngredientWhereInput[] | CustomIngredientWhereInput>;
  NOT?: Maybe<CustomIngredientWhereInput[] | CustomIngredientWhereInput>;
}

export interface FavoriteFoodWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  food_id?: Maybe<String>;
  food_id_not?: Maybe<String>;
  food_id_in?: Maybe<String[] | String>;
  food_id_not_in?: Maybe<String[] | String>;
  food_id_lt?: Maybe<String>;
  food_id_lte?: Maybe<String>;
  food_id_gt?: Maybe<String>;
  food_id_gte?: Maybe<String>;
  food_id_contains?: Maybe<String>;
  food_id_not_contains?: Maybe<String>;
  food_id_starts_with?: Maybe<String>;
  food_id_not_starts_with?: Maybe<String>;
  food_id_ends_with?: Maybe<String>;
  food_id_not_ends_with?: Maybe<String>;
  custom?: Maybe<Boolean>;
  custom_not?: Maybe<Boolean>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FavoriteFoodWhereInput[] | FavoriteFoodWhereInput>;
  OR?: Maybe<FavoriteFoodWhereInput[] | FavoriteFoodWhereInput>;
  NOT?: Maybe<FavoriteFoodWhereInput[] | FavoriteFoodWhereInput>;
}

export interface WeightLogWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  current_weight?: Maybe<Int>;
  current_weight_not?: Maybe<Int>;
  current_weight_in?: Maybe<Int[] | Int>;
  current_weight_not_in?: Maybe<Int[] | Int>;
  current_weight_lt?: Maybe<Int>;
  current_weight_lte?: Maybe<Int>;
  current_weight_gt?: Maybe<Int>;
  current_weight_gte?: Maybe<Int>;
  user?: Maybe<UserWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WeightLogWhereInput[] | WeightLogWhereInput>;
  OR?: Maybe<WeightLogWhereInput[] | WeightLogWhereInput>;
  NOT?: Maybe<WeightLogWhereInput[] | WeightLogWhereInput>;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  viewCount?: Maybe<Int>;
  viewCount_not?: Maybe<Int>;
  viewCount_in?: Maybe<Int[] | Int>;
  viewCount_not_in?: Maybe<Int[] | Int>;
  viewCount_lt?: Maybe<Int>;
  viewCount_lte?: Maybe<Int>;
  viewCount_gt?: Maybe<Int>;
  viewCount_gte?: Maybe<Int>;
  likeCount?: Maybe<Int>;
  likeCount_not?: Maybe<Int>;
  likeCount_in?: Maybe<Int[] | Int>;
  likeCount_not_in?: Maybe<Int[] | Int>;
  likeCount_lt?: Maybe<Int>;
  likeCount_lte?: Maybe<Int>;
  likeCount_gt?: Maybe<Int>;
  likeCount_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  post?: Maybe<PostWhereInput>;
  likeCount?: Maybe<Int>;
  likeCount_not?: Maybe<Int>;
  likeCount_in?: Maybe<Int[] | Int>;
  likeCount_not_in?: Maybe<Int[] | Int>;
  likeCount_lt?: Maybe<Int>;
  likeCount_lte?: Maybe<Int>;
  likeCount_gt?: Maybe<Int>;
  likeCount_gte?: Maybe<Int>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export type CustomIngredientWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type CustomRecipeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type DailyRecordWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type FavoriteFoodWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type IngredientListWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProfileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  user_id?: Maybe<String>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export type WeightLogWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutCommentsInput;
  user_id: String;
  post: PostCreateOneWithoutCommentsInput;
  likeCount?: Maybe<Int>;
  body: String;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  profile?: Maybe<ProfileCreateOneWithoutUserInput>;
  daily_records?: Maybe<DailyRecordCreateManyWithoutUserInput>;
  custom_recipes?: Maybe<CustomRecipeCreateManyWithoutUserInput>;
  custom_ingredients?: Maybe<CustomIngredientCreateManyWithoutUserInput>;
  ingredient_list?: Maybe<IngredientListCreateManyWithoutUserInput>;
  favorites?: Maybe<FavoriteFoodCreateManyWithoutUserInput>;
  weight_logs?: Maybe<WeightLogCreateManyWithoutUserInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
}

export interface ProfileCreateOneWithoutUserInput {
  create?: Maybe<ProfileCreateWithoutUserInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface ProfileCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  user_id: String;
  age: Int;
  weight: Int;
  height: Int;
  gender?: Maybe<Boolean>;
  goal_weight?: Maybe<Int>;
  activity_level?: Maybe<Int>;
  diet?: Maybe<String>;
  fat?: Maybe<Int>;
  carbs?: Maybe<Int>;
  protein?: Maybe<Int>;
  fiber?: Maybe<Int>;
  calories?: Maybe<Int>;
}

export interface DailyRecordCreateManyWithoutUserInput {
  create?: Maybe<
    DailyRecordCreateWithoutUserInput[] | DailyRecordCreateWithoutUserInput
  >;
  connect?: Maybe<DailyRecordWhereUniqueInput[] | DailyRecordWhereUniqueInput>;
}

export interface DailyRecordCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  user_id: String;
  date: String;
  calories: Int;
  fat: Int;
  carbs: Int;
  fiber: Int;
  protein: Int;
  food_string: String;
  meal_type: String;
}

export interface CustomRecipeCreateManyWithoutUserInput {
  create?: Maybe<
    CustomRecipeCreateWithoutUserInput[] | CustomRecipeCreateWithoutUserInput
  >;
  connect?: Maybe<
    CustomRecipeWhereUniqueInput[] | CustomRecipeWhereUniqueInput
  >;
}

export interface CustomRecipeCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  user_id: String;
  portions: Int;
  ingredient_list?: Maybe<IngredientListCreateManyWithoutRecipeInput>;
}

export interface IngredientListCreateManyWithoutRecipeInput {
  create?: Maybe<
    | IngredientListCreateWithoutRecipeInput[]
    | IngredientListCreateWithoutRecipeInput
  >;
  connect?: Maybe<
    IngredientListWhereUniqueInput[] | IngredientListWhereUniqueInput
  >;
}

export interface IngredientListCreateWithoutRecipeInput {
  id?: Maybe<ID_Input>;
  user_id: String;
  recipe_id: String;
  ingredient_id: String;
  custom: Boolean;
  amount: Float;
  unit: String;
  user: UserCreateOneWithoutIngredient_listInput;
}

export interface UserCreateOneWithoutIngredient_listInput {
  create?: Maybe<UserCreateWithoutIngredient_listInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutIngredient_listInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  profile?: Maybe<ProfileCreateOneWithoutUserInput>;
  daily_records?: Maybe<DailyRecordCreateManyWithoutUserInput>;
  custom_recipes?: Maybe<CustomRecipeCreateManyWithoutUserInput>;
  custom_ingredients?: Maybe<CustomIngredientCreateManyWithoutUserInput>;
  favorites?: Maybe<FavoriteFoodCreateManyWithoutUserInput>;
  weight_logs?: Maybe<WeightLogCreateManyWithoutUserInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
}

export interface CustomIngredientCreateManyWithoutUserInput {
  create?: Maybe<
    | CustomIngredientCreateWithoutUserInput[]
    | CustomIngredientCreateWithoutUserInput
  >;
  connect?: Maybe<
    CustomIngredientWhereUniqueInput[] | CustomIngredientWhereUniqueInput
  >;
}

export interface CustomIngredientCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  user_id: String;
  name: String;
  description: String;
  fat: Int;
  carbs: Int;
  protein: Int;
  fiber: Int;
  calories: Int;
}

export interface FavoriteFoodCreateManyWithoutUserInput {
  create?: Maybe<
    FavoriteFoodCreateWithoutUserInput[] | FavoriteFoodCreateWithoutUserInput
  >;
  connect?: Maybe<
    FavoriteFoodWhereUniqueInput[] | FavoriteFoodWhereUniqueInput
  >;
}

export interface FavoriteFoodCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  food_id: String;
  custom: Boolean;
  user_id: String;
}

export interface WeightLogCreateManyWithoutUserInput {
  create?: Maybe<
    WeightLogCreateWithoutUserInput[] | WeightLogCreateWithoutUserInput
  >;
  connect?: Maybe<WeightLogWhereUniqueInput[] | WeightLogWhereUniqueInput>;
}

export interface WeightLogCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  date: String;
  user_id: String;
  current_weight: Int;
}

export interface PostCreateManyWithoutUserInput {
  create?: Maybe<PostCreateWithoutUserInput[] | PostCreateWithoutUserInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  user_id: String;
  viewCount?: Maybe<Int>;
  likeCount?: Maybe<Int>;
  title: String;
  body: String;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
}

export interface CommentCreateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutCommentsInput;
  user_id: String;
  likeCount?: Maybe<Int>;
  body: String;
}

export interface CommentCreateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  user_id: String;
  post: PostCreateOneWithoutCommentsInput;
  likeCount?: Maybe<Int>;
  body: String;
}

export interface PostCreateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutPostsInput;
  user_id: String;
  viewCount?: Maybe<Int>;
  likeCount?: Maybe<Int>;
  title: String;
  body: String;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  profile?: Maybe<ProfileCreateOneWithoutUserInput>;
  daily_records?: Maybe<DailyRecordCreateManyWithoutUserInput>;
  custom_recipes?: Maybe<CustomRecipeCreateManyWithoutUserInput>;
  custom_ingredients?: Maybe<CustomIngredientCreateManyWithoutUserInput>;
  ingredient_list?: Maybe<IngredientListCreateManyWithoutUserInput>;
  favorites?: Maybe<FavoriteFoodCreateManyWithoutUserInput>;
  weight_logs?: Maybe<WeightLogCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
}

export interface IngredientListCreateManyWithoutUserInput {
  create?: Maybe<
    | IngredientListCreateWithoutUserInput[]
    | IngredientListCreateWithoutUserInput
  >;
  connect?: Maybe<
    IngredientListWhereUniqueInput[] | IngredientListWhereUniqueInput
  >;
}

export interface IngredientListCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  user_id: String;
  recipe_id: String;
  ingredient_id: String;
  custom: Boolean;
  amount: Float;
  unit: String;
  recipe: CustomRecipeCreateOneWithoutIngredient_listInput;
}

export interface CustomRecipeCreateOneWithoutIngredient_listInput {
  create?: Maybe<CustomRecipeCreateWithoutIngredient_listInput>;
  connect?: Maybe<CustomRecipeWhereUniqueInput>;
}

export interface CustomRecipeCreateWithoutIngredient_listInput {
  id?: Maybe<ID_Input>;
  name: String;
  user_id: String;
  portions: Int;
  user: UserCreateOneWithoutCustom_recipesInput;
}

export interface UserCreateOneWithoutCustom_recipesInput {
  create?: Maybe<UserCreateWithoutCustom_recipesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCustom_recipesInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  profile?: Maybe<ProfileCreateOneWithoutUserInput>;
  daily_records?: Maybe<DailyRecordCreateManyWithoutUserInput>;
  custom_ingredients?: Maybe<CustomIngredientCreateManyWithoutUserInput>;
  ingredient_list?: Maybe<IngredientListCreateManyWithoutUserInput>;
  favorites?: Maybe<FavoriteFoodCreateManyWithoutUserInput>;
  weight_logs?: Maybe<WeightLogCreateManyWithoutUserInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
}

export interface CommentUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
  user_id?: Maybe<String>;
  post?: Maybe<PostUpdateOneRequiredWithoutCommentsInput>;
  likeCount?: Maybe<Int>;
  body?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCommentsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profile?: Maybe<ProfileUpdateOneWithoutUserInput>;
  daily_records?: Maybe<DailyRecordUpdateManyWithoutUserInput>;
  custom_recipes?: Maybe<CustomRecipeUpdateManyWithoutUserInput>;
  custom_ingredients?: Maybe<CustomIngredientUpdateManyWithoutUserInput>;
  ingredient_list?: Maybe<IngredientListUpdateManyWithoutUserInput>;
  favorites?: Maybe<FavoriteFoodUpdateManyWithoutUserInput>;
  weight_logs?: Maybe<WeightLogUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
}

export interface ProfileUpdateOneWithoutUserInput {
  create?: Maybe<ProfileCreateWithoutUserInput>;
  update?: Maybe<ProfileUpdateWithoutUserDataInput>;
  upsert?: Maybe<ProfileUpsertWithoutUserInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface ProfileUpdateWithoutUserDataInput {
  user_id?: Maybe<String>;
  age?: Maybe<Int>;
  weight?: Maybe<Int>;
  height?: Maybe<Int>;
  gender?: Maybe<Boolean>;
  goal_weight?: Maybe<Int>;
  activity_level?: Maybe<Int>;
  diet?: Maybe<String>;
  fat?: Maybe<Int>;
  carbs?: Maybe<Int>;
  protein?: Maybe<Int>;
  fiber?: Maybe<Int>;
  calories?: Maybe<Int>;
}

export interface ProfileUpsertWithoutUserInput {
  update: ProfileUpdateWithoutUserDataInput;
  create: ProfileCreateWithoutUserInput;
}

export interface DailyRecordUpdateManyWithoutUserInput {
  create?: Maybe<
    DailyRecordCreateWithoutUserInput[] | DailyRecordCreateWithoutUserInput
  >;
  delete?: Maybe<DailyRecordWhereUniqueInput[] | DailyRecordWhereUniqueInput>;
  connect?: Maybe<DailyRecordWhereUniqueInput[] | DailyRecordWhereUniqueInput>;
  set?: Maybe<DailyRecordWhereUniqueInput[] | DailyRecordWhereUniqueInput>;
  disconnect?: Maybe<
    DailyRecordWhereUniqueInput[] | DailyRecordWhereUniqueInput
  >;
  update?: Maybe<
    | DailyRecordUpdateWithWhereUniqueWithoutUserInput[]
    | DailyRecordUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | DailyRecordUpsertWithWhereUniqueWithoutUserInput[]
    | DailyRecordUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    DailyRecordScalarWhereInput[] | DailyRecordScalarWhereInput
  >;
  updateMany?: Maybe<
    | DailyRecordUpdateManyWithWhereNestedInput[]
    | DailyRecordUpdateManyWithWhereNestedInput
  >;
}

export interface DailyRecordUpdateWithWhereUniqueWithoutUserInput {
  where: DailyRecordWhereUniqueInput;
  data: DailyRecordUpdateWithoutUserDataInput;
}

export interface DailyRecordUpdateWithoutUserDataInput {
  user_id?: Maybe<String>;
  date?: Maybe<String>;
  calories?: Maybe<Int>;
  fat?: Maybe<Int>;
  carbs?: Maybe<Int>;
  fiber?: Maybe<Int>;
  protein?: Maybe<Int>;
  food_string?: Maybe<String>;
  meal_type?: Maybe<String>;
}

export interface DailyRecordUpsertWithWhereUniqueWithoutUserInput {
  where: DailyRecordWhereUniqueInput;
  update: DailyRecordUpdateWithoutUserDataInput;
  create: DailyRecordCreateWithoutUserInput;
}

export interface DailyRecordScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  calories?: Maybe<Int>;
  calories_not?: Maybe<Int>;
  calories_in?: Maybe<Int[] | Int>;
  calories_not_in?: Maybe<Int[] | Int>;
  calories_lt?: Maybe<Int>;
  calories_lte?: Maybe<Int>;
  calories_gt?: Maybe<Int>;
  calories_gte?: Maybe<Int>;
  fat?: Maybe<Int>;
  fat_not?: Maybe<Int>;
  fat_in?: Maybe<Int[] | Int>;
  fat_not_in?: Maybe<Int[] | Int>;
  fat_lt?: Maybe<Int>;
  fat_lte?: Maybe<Int>;
  fat_gt?: Maybe<Int>;
  fat_gte?: Maybe<Int>;
  carbs?: Maybe<Int>;
  carbs_not?: Maybe<Int>;
  carbs_in?: Maybe<Int[] | Int>;
  carbs_not_in?: Maybe<Int[] | Int>;
  carbs_lt?: Maybe<Int>;
  carbs_lte?: Maybe<Int>;
  carbs_gt?: Maybe<Int>;
  carbs_gte?: Maybe<Int>;
  fiber?: Maybe<Int>;
  fiber_not?: Maybe<Int>;
  fiber_in?: Maybe<Int[] | Int>;
  fiber_not_in?: Maybe<Int[] | Int>;
  fiber_lt?: Maybe<Int>;
  fiber_lte?: Maybe<Int>;
  fiber_gt?: Maybe<Int>;
  fiber_gte?: Maybe<Int>;
  protein?: Maybe<Int>;
  protein_not?: Maybe<Int>;
  protein_in?: Maybe<Int[] | Int>;
  protein_not_in?: Maybe<Int[] | Int>;
  protein_lt?: Maybe<Int>;
  protein_lte?: Maybe<Int>;
  protein_gt?: Maybe<Int>;
  protein_gte?: Maybe<Int>;
  food_string?: Maybe<String>;
  food_string_not?: Maybe<String>;
  food_string_in?: Maybe<String[] | String>;
  food_string_not_in?: Maybe<String[] | String>;
  food_string_lt?: Maybe<String>;
  food_string_lte?: Maybe<String>;
  food_string_gt?: Maybe<String>;
  food_string_gte?: Maybe<String>;
  food_string_contains?: Maybe<String>;
  food_string_not_contains?: Maybe<String>;
  food_string_starts_with?: Maybe<String>;
  food_string_not_starts_with?: Maybe<String>;
  food_string_ends_with?: Maybe<String>;
  food_string_not_ends_with?: Maybe<String>;
  meal_type?: Maybe<String>;
  meal_type_not?: Maybe<String>;
  meal_type_in?: Maybe<String[] | String>;
  meal_type_not_in?: Maybe<String[] | String>;
  meal_type_lt?: Maybe<String>;
  meal_type_lte?: Maybe<String>;
  meal_type_gt?: Maybe<String>;
  meal_type_gte?: Maybe<String>;
  meal_type_contains?: Maybe<String>;
  meal_type_not_contains?: Maybe<String>;
  meal_type_starts_with?: Maybe<String>;
  meal_type_not_starts_with?: Maybe<String>;
  meal_type_ends_with?: Maybe<String>;
  meal_type_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<DailyRecordScalarWhereInput[] | DailyRecordScalarWhereInput>;
  OR?: Maybe<DailyRecordScalarWhereInput[] | DailyRecordScalarWhereInput>;
  NOT?: Maybe<DailyRecordScalarWhereInput[] | DailyRecordScalarWhereInput>;
}

export interface DailyRecordUpdateManyWithWhereNestedInput {
  where: DailyRecordScalarWhereInput;
  data: DailyRecordUpdateManyDataInput;
}

export interface DailyRecordUpdateManyDataInput {
  user_id?: Maybe<String>;
  date?: Maybe<String>;
  calories?: Maybe<Int>;
  fat?: Maybe<Int>;
  carbs?: Maybe<Int>;
  fiber?: Maybe<Int>;
  protein?: Maybe<Int>;
  food_string?: Maybe<String>;
  meal_type?: Maybe<String>;
}

export interface CustomRecipeUpdateManyWithoutUserInput {
  create?: Maybe<
    CustomRecipeCreateWithoutUserInput[] | CustomRecipeCreateWithoutUserInput
  >;
  delete?: Maybe<CustomRecipeWhereUniqueInput[] | CustomRecipeWhereUniqueInput>;
  connect?: Maybe<
    CustomRecipeWhereUniqueInput[] | CustomRecipeWhereUniqueInput
  >;
  set?: Maybe<CustomRecipeWhereUniqueInput[] | CustomRecipeWhereUniqueInput>;
  disconnect?: Maybe<
    CustomRecipeWhereUniqueInput[] | CustomRecipeWhereUniqueInput
  >;
  update?: Maybe<
    | CustomRecipeUpdateWithWhereUniqueWithoutUserInput[]
    | CustomRecipeUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CustomRecipeUpsertWithWhereUniqueWithoutUserInput[]
    | CustomRecipeUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    CustomRecipeScalarWhereInput[] | CustomRecipeScalarWhereInput
  >;
  updateMany?: Maybe<
    | CustomRecipeUpdateManyWithWhereNestedInput[]
    | CustomRecipeUpdateManyWithWhereNestedInput
  >;
}

export interface CustomRecipeUpdateWithWhereUniqueWithoutUserInput {
  where: CustomRecipeWhereUniqueInput;
  data: CustomRecipeUpdateWithoutUserDataInput;
}

export interface CustomRecipeUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  user_id?: Maybe<String>;
  portions?: Maybe<Int>;
  ingredient_list?: Maybe<IngredientListUpdateManyWithoutRecipeInput>;
}

export interface IngredientListUpdateManyWithoutRecipeInput {
  create?: Maybe<
    | IngredientListCreateWithoutRecipeInput[]
    | IngredientListCreateWithoutRecipeInput
  >;
  delete?: Maybe<
    IngredientListWhereUniqueInput[] | IngredientListWhereUniqueInput
  >;
  connect?: Maybe<
    IngredientListWhereUniqueInput[] | IngredientListWhereUniqueInput
  >;
  set?: Maybe<
    IngredientListWhereUniqueInput[] | IngredientListWhereUniqueInput
  >;
  disconnect?: Maybe<
    IngredientListWhereUniqueInput[] | IngredientListWhereUniqueInput
  >;
  update?: Maybe<
    | IngredientListUpdateWithWhereUniqueWithoutRecipeInput[]
    | IngredientListUpdateWithWhereUniqueWithoutRecipeInput
  >;
  upsert?: Maybe<
    | IngredientListUpsertWithWhereUniqueWithoutRecipeInput[]
    | IngredientListUpsertWithWhereUniqueWithoutRecipeInput
  >;
  deleteMany?: Maybe<
    IngredientListScalarWhereInput[] | IngredientListScalarWhereInput
  >;
  updateMany?: Maybe<
    | IngredientListUpdateManyWithWhereNestedInput[]
    | IngredientListUpdateManyWithWhereNestedInput
  >;
}

export interface IngredientListUpdateWithWhereUniqueWithoutRecipeInput {
  where: IngredientListWhereUniqueInput;
  data: IngredientListUpdateWithoutRecipeDataInput;
}

export interface IngredientListUpdateWithoutRecipeDataInput {
  user_id?: Maybe<String>;
  recipe_id?: Maybe<String>;
  ingredient_id?: Maybe<String>;
  custom?: Maybe<Boolean>;
  amount?: Maybe<Float>;
  unit?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutIngredient_listInput>;
}

export interface UserUpdateOneRequiredWithoutIngredient_listInput {
  create?: Maybe<UserCreateWithoutIngredient_listInput>;
  update?: Maybe<UserUpdateWithoutIngredient_listDataInput>;
  upsert?: Maybe<UserUpsertWithoutIngredient_listInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutIngredient_listDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profile?: Maybe<ProfileUpdateOneWithoutUserInput>;
  daily_records?: Maybe<DailyRecordUpdateManyWithoutUserInput>;
  custom_recipes?: Maybe<CustomRecipeUpdateManyWithoutUserInput>;
  custom_ingredients?: Maybe<CustomIngredientUpdateManyWithoutUserInput>;
  favorites?: Maybe<FavoriteFoodUpdateManyWithoutUserInput>;
  weight_logs?: Maybe<WeightLogUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
}

export interface CustomIngredientUpdateManyWithoutUserInput {
  create?: Maybe<
    | CustomIngredientCreateWithoutUserInput[]
    | CustomIngredientCreateWithoutUserInput
  >;
  delete?: Maybe<
    CustomIngredientWhereUniqueInput[] | CustomIngredientWhereUniqueInput
  >;
  connect?: Maybe<
    CustomIngredientWhereUniqueInput[] | CustomIngredientWhereUniqueInput
  >;
  set?: Maybe<
    CustomIngredientWhereUniqueInput[] | CustomIngredientWhereUniqueInput
  >;
  disconnect?: Maybe<
    CustomIngredientWhereUniqueInput[] | CustomIngredientWhereUniqueInput
  >;
  update?: Maybe<
    | CustomIngredientUpdateWithWhereUniqueWithoutUserInput[]
    | CustomIngredientUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CustomIngredientUpsertWithWhereUniqueWithoutUserInput[]
    | CustomIngredientUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    CustomIngredientScalarWhereInput[] | CustomIngredientScalarWhereInput
  >;
  updateMany?: Maybe<
    | CustomIngredientUpdateManyWithWhereNestedInput[]
    | CustomIngredientUpdateManyWithWhereNestedInput
  >;
}

export interface CustomIngredientUpdateWithWhereUniqueWithoutUserInput {
  where: CustomIngredientWhereUniqueInput;
  data: CustomIngredientUpdateWithoutUserDataInput;
}

export interface CustomIngredientUpdateWithoutUserDataInput {
  user_id?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  fat?: Maybe<Int>;
  carbs?: Maybe<Int>;
  protein?: Maybe<Int>;
  fiber?: Maybe<Int>;
  calories?: Maybe<Int>;
}

export interface CustomIngredientUpsertWithWhereUniqueWithoutUserInput {
  where: CustomIngredientWhereUniqueInput;
  update: CustomIngredientUpdateWithoutUserDataInput;
  create: CustomIngredientCreateWithoutUserInput;
}

export interface CustomIngredientScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  fat?: Maybe<Int>;
  fat_not?: Maybe<Int>;
  fat_in?: Maybe<Int[] | Int>;
  fat_not_in?: Maybe<Int[] | Int>;
  fat_lt?: Maybe<Int>;
  fat_lte?: Maybe<Int>;
  fat_gt?: Maybe<Int>;
  fat_gte?: Maybe<Int>;
  carbs?: Maybe<Int>;
  carbs_not?: Maybe<Int>;
  carbs_in?: Maybe<Int[] | Int>;
  carbs_not_in?: Maybe<Int[] | Int>;
  carbs_lt?: Maybe<Int>;
  carbs_lte?: Maybe<Int>;
  carbs_gt?: Maybe<Int>;
  carbs_gte?: Maybe<Int>;
  protein?: Maybe<Int>;
  protein_not?: Maybe<Int>;
  protein_in?: Maybe<Int[] | Int>;
  protein_not_in?: Maybe<Int[] | Int>;
  protein_lt?: Maybe<Int>;
  protein_lte?: Maybe<Int>;
  protein_gt?: Maybe<Int>;
  protein_gte?: Maybe<Int>;
  fiber?: Maybe<Int>;
  fiber_not?: Maybe<Int>;
  fiber_in?: Maybe<Int[] | Int>;
  fiber_not_in?: Maybe<Int[] | Int>;
  fiber_lt?: Maybe<Int>;
  fiber_lte?: Maybe<Int>;
  fiber_gt?: Maybe<Int>;
  fiber_gte?: Maybe<Int>;
  calories?: Maybe<Int>;
  calories_not?: Maybe<Int>;
  calories_in?: Maybe<Int[] | Int>;
  calories_not_in?: Maybe<Int[] | Int>;
  calories_lt?: Maybe<Int>;
  calories_lte?: Maybe<Int>;
  calories_gt?: Maybe<Int>;
  calories_gte?: Maybe<Int>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    CustomIngredientScalarWhereInput[] | CustomIngredientScalarWhereInput
  >;
  OR?: Maybe<
    CustomIngredientScalarWhereInput[] | CustomIngredientScalarWhereInput
  >;
  NOT?: Maybe<
    CustomIngredientScalarWhereInput[] | CustomIngredientScalarWhereInput
  >;
}

export interface CustomIngredientUpdateManyWithWhereNestedInput {
  where: CustomIngredientScalarWhereInput;
  data: CustomIngredientUpdateManyDataInput;
}

export interface CustomIngredientUpdateManyDataInput {
  user_id?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  fat?: Maybe<Int>;
  carbs?: Maybe<Int>;
  protein?: Maybe<Int>;
  fiber?: Maybe<Int>;
  calories?: Maybe<Int>;
}

export interface FavoriteFoodUpdateManyWithoutUserInput {
  create?: Maybe<
    FavoriteFoodCreateWithoutUserInput[] | FavoriteFoodCreateWithoutUserInput
  >;
  delete?: Maybe<FavoriteFoodWhereUniqueInput[] | FavoriteFoodWhereUniqueInput>;
  connect?: Maybe<
    FavoriteFoodWhereUniqueInput[] | FavoriteFoodWhereUniqueInput
  >;
  set?: Maybe<FavoriteFoodWhereUniqueInput[] | FavoriteFoodWhereUniqueInput>;
  disconnect?: Maybe<
    FavoriteFoodWhereUniqueInput[] | FavoriteFoodWhereUniqueInput
  >;
  update?: Maybe<
    | FavoriteFoodUpdateWithWhereUniqueWithoutUserInput[]
    | FavoriteFoodUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | FavoriteFoodUpsertWithWhereUniqueWithoutUserInput[]
    | FavoriteFoodUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    FavoriteFoodScalarWhereInput[] | FavoriteFoodScalarWhereInput
  >;
  updateMany?: Maybe<
    | FavoriteFoodUpdateManyWithWhereNestedInput[]
    | FavoriteFoodUpdateManyWithWhereNestedInput
  >;
}

export interface FavoriteFoodUpdateWithWhereUniqueWithoutUserInput {
  where: FavoriteFoodWhereUniqueInput;
  data: FavoriteFoodUpdateWithoutUserDataInput;
}

export interface FavoriteFoodUpdateWithoutUserDataInput {
  food_id?: Maybe<String>;
  custom?: Maybe<Boolean>;
  user_id?: Maybe<String>;
}

export interface FavoriteFoodUpsertWithWhereUniqueWithoutUserInput {
  where: FavoriteFoodWhereUniqueInput;
  update: FavoriteFoodUpdateWithoutUserDataInput;
  create: FavoriteFoodCreateWithoutUserInput;
}

export interface FavoriteFoodScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  food_id?: Maybe<String>;
  food_id_not?: Maybe<String>;
  food_id_in?: Maybe<String[] | String>;
  food_id_not_in?: Maybe<String[] | String>;
  food_id_lt?: Maybe<String>;
  food_id_lte?: Maybe<String>;
  food_id_gt?: Maybe<String>;
  food_id_gte?: Maybe<String>;
  food_id_contains?: Maybe<String>;
  food_id_not_contains?: Maybe<String>;
  food_id_starts_with?: Maybe<String>;
  food_id_not_starts_with?: Maybe<String>;
  food_id_ends_with?: Maybe<String>;
  food_id_not_ends_with?: Maybe<String>;
  custom?: Maybe<Boolean>;
  custom_not?: Maybe<Boolean>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FavoriteFoodScalarWhereInput[] | FavoriteFoodScalarWhereInput>;
  OR?: Maybe<FavoriteFoodScalarWhereInput[] | FavoriteFoodScalarWhereInput>;
  NOT?: Maybe<FavoriteFoodScalarWhereInput[] | FavoriteFoodScalarWhereInput>;
}

export interface FavoriteFoodUpdateManyWithWhereNestedInput {
  where: FavoriteFoodScalarWhereInput;
  data: FavoriteFoodUpdateManyDataInput;
}

export interface FavoriteFoodUpdateManyDataInput {
  food_id?: Maybe<String>;
  custom?: Maybe<Boolean>;
  user_id?: Maybe<String>;
}

export interface WeightLogUpdateManyWithoutUserInput {
  create?: Maybe<
    WeightLogCreateWithoutUserInput[] | WeightLogCreateWithoutUserInput
  >;
  delete?: Maybe<WeightLogWhereUniqueInput[] | WeightLogWhereUniqueInput>;
  connect?: Maybe<WeightLogWhereUniqueInput[] | WeightLogWhereUniqueInput>;
  set?: Maybe<WeightLogWhereUniqueInput[] | WeightLogWhereUniqueInput>;
  disconnect?: Maybe<WeightLogWhereUniqueInput[] | WeightLogWhereUniqueInput>;
  update?: Maybe<
    | WeightLogUpdateWithWhereUniqueWithoutUserInput[]
    | WeightLogUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | WeightLogUpsertWithWhereUniqueWithoutUserInput[]
    | WeightLogUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<WeightLogScalarWhereInput[] | WeightLogScalarWhereInput>;
  updateMany?: Maybe<
    | WeightLogUpdateManyWithWhereNestedInput[]
    | WeightLogUpdateManyWithWhereNestedInput
  >;
}

export interface WeightLogUpdateWithWhereUniqueWithoutUserInput {
  where: WeightLogWhereUniqueInput;
  data: WeightLogUpdateWithoutUserDataInput;
}

export interface WeightLogUpdateWithoutUserDataInput {
  date?: Maybe<String>;
  user_id?: Maybe<String>;
  current_weight?: Maybe<Int>;
}

export interface WeightLogUpsertWithWhereUniqueWithoutUserInput {
  where: WeightLogWhereUniqueInput;
  update: WeightLogUpdateWithoutUserDataInput;
  create: WeightLogCreateWithoutUserInput;
}

export interface WeightLogScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  current_weight?: Maybe<Int>;
  current_weight_not?: Maybe<Int>;
  current_weight_in?: Maybe<Int[] | Int>;
  current_weight_not_in?: Maybe<Int[] | Int>;
  current_weight_lt?: Maybe<Int>;
  current_weight_lte?: Maybe<Int>;
  current_weight_gt?: Maybe<Int>;
  current_weight_gte?: Maybe<Int>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WeightLogScalarWhereInput[] | WeightLogScalarWhereInput>;
  OR?: Maybe<WeightLogScalarWhereInput[] | WeightLogScalarWhereInput>;
  NOT?: Maybe<WeightLogScalarWhereInput[] | WeightLogScalarWhereInput>;
}

export interface WeightLogUpdateManyWithWhereNestedInput {
  where: WeightLogScalarWhereInput;
  data: WeightLogUpdateManyDataInput;
}

export interface WeightLogUpdateManyDataInput {
  date?: Maybe<String>;
  user_id?: Maybe<String>;
  current_weight?: Maybe<Int>;
}

export interface PostUpdateManyWithoutUserInput {
  create?: Maybe<PostCreateWithoutUserInput[] | PostCreateWithoutUserInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutUserInput[]
    | PostUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutUserInput[]
    | PostUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutUserDataInput;
}

export interface PostUpdateWithoutUserDataInput {
  user_id?: Maybe<String>;
  viewCount?: Maybe<Int>;
  likeCount?: Maybe<Int>;
  title?: Maybe<String>;
  body?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
}

export interface CommentUpdateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutPostInput[]
    | CommentUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutPostInput[]
    | CommentUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutPostDataInput;
}

export interface CommentUpdateWithoutPostDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
  user_id?: Maybe<String>;
  likeCount?: Maybe<Int>;
  body?: Maybe<String>;
}

export interface CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutPostDataInput;
  create: CommentCreateWithoutPostInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  likeCount?: Maybe<Int>;
  likeCount_not?: Maybe<Int>;
  likeCount_in?: Maybe<Int[] | Int>;
  likeCount_not_in?: Maybe<Int[] | Int>;
  likeCount_lt?: Maybe<Int>;
  likeCount_lte?: Maybe<Int>;
  likeCount_gt?: Maybe<Int>;
  likeCount_gte?: Maybe<Int>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  user_id?: Maybe<String>;
  likeCount?: Maybe<Int>;
  body?: Maybe<String>;
}

export interface PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutUserDataInput;
  create: PostCreateWithoutUserInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  viewCount?: Maybe<Int>;
  viewCount_not?: Maybe<Int>;
  viewCount_in?: Maybe<Int[] | Int>;
  viewCount_not_in?: Maybe<Int[] | Int>;
  viewCount_lt?: Maybe<Int>;
  viewCount_lte?: Maybe<Int>;
  viewCount_gt?: Maybe<Int>;
  viewCount_gte?: Maybe<Int>;
  likeCount?: Maybe<Int>;
  likeCount_not?: Maybe<Int>;
  likeCount_in?: Maybe<Int[] | Int>;
  likeCount_not_in?: Maybe<Int[] | Int>;
  likeCount_lt?: Maybe<Int>;
  likeCount_lte?: Maybe<Int>;
  likeCount_gt?: Maybe<Int>;
  likeCount_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  user_id?: Maybe<String>;
  viewCount?: Maybe<Int>;
  likeCount?: Maybe<Int>;
  title?: Maybe<String>;
  body?: Maybe<String>;
}

export interface CommentUpdateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutUserInput[]
    | CommentUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutUserInput[]
    | CommentUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutUserDataInput;
}

export interface CommentUpdateWithoutUserDataInput {
  user_id?: Maybe<String>;
  post?: Maybe<PostUpdateOneRequiredWithoutCommentsInput>;
  likeCount?: Maybe<Int>;
  body?: Maybe<String>;
}

export interface PostUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  update?: Maybe<PostUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<PostUpsertWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutCommentsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  user_id?: Maybe<String>;
  viewCount?: Maybe<Int>;
  likeCount?: Maybe<Int>;
  title?: Maybe<String>;
  body?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profile?: Maybe<ProfileUpdateOneWithoutUserInput>;
  daily_records?: Maybe<DailyRecordUpdateManyWithoutUserInput>;
  custom_recipes?: Maybe<CustomRecipeUpdateManyWithoutUserInput>;
  custom_ingredients?: Maybe<CustomIngredientUpdateManyWithoutUserInput>;
  ingredient_list?: Maybe<IngredientListUpdateManyWithoutUserInput>;
  favorites?: Maybe<FavoriteFoodUpdateManyWithoutUserInput>;
  weight_logs?: Maybe<WeightLogUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
}

export interface IngredientListUpdateManyWithoutUserInput {
  create?: Maybe<
    | IngredientListCreateWithoutUserInput[]
    | IngredientListCreateWithoutUserInput
  >;
  delete?: Maybe<
    IngredientListWhereUniqueInput[] | IngredientListWhereUniqueInput
  >;
  connect?: Maybe<
    IngredientListWhereUniqueInput[] | IngredientListWhereUniqueInput
  >;
  set?: Maybe<
    IngredientListWhereUniqueInput[] | IngredientListWhereUniqueInput
  >;
  disconnect?: Maybe<
    IngredientListWhereUniqueInput[] | IngredientListWhereUniqueInput
  >;
  update?: Maybe<
    | IngredientListUpdateWithWhereUniqueWithoutUserInput[]
    | IngredientListUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | IngredientListUpsertWithWhereUniqueWithoutUserInput[]
    | IngredientListUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    IngredientListScalarWhereInput[] | IngredientListScalarWhereInput
  >;
  updateMany?: Maybe<
    | IngredientListUpdateManyWithWhereNestedInput[]
    | IngredientListUpdateManyWithWhereNestedInput
  >;
}

export interface IngredientListUpdateWithWhereUniqueWithoutUserInput {
  where: IngredientListWhereUniqueInput;
  data: IngredientListUpdateWithoutUserDataInput;
}

export interface IngredientListUpdateWithoutUserDataInput {
  user_id?: Maybe<String>;
  recipe_id?: Maybe<String>;
  ingredient_id?: Maybe<String>;
  custom?: Maybe<Boolean>;
  amount?: Maybe<Float>;
  unit?: Maybe<String>;
  recipe?: Maybe<CustomRecipeUpdateOneRequiredWithoutIngredient_listInput>;
}

export interface CustomRecipeUpdateOneRequiredWithoutIngredient_listInput {
  create?: Maybe<CustomRecipeCreateWithoutIngredient_listInput>;
  update?: Maybe<CustomRecipeUpdateWithoutIngredient_listDataInput>;
  upsert?: Maybe<CustomRecipeUpsertWithoutIngredient_listInput>;
  connect?: Maybe<CustomRecipeWhereUniqueInput>;
}

export interface CustomRecipeUpdateWithoutIngredient_listDataInput {
  name?: Maybe<String>;
  user_id?: Maybe<String>;
  portions?: Maybe<Int>;
  user?: Maybe<UserUpdateOneRequiredWithoutCustom_recipesInput>;
}

export interface UserUpdateOneRequiredWithoutCustom_recipesInput {
  create?: Maybe<UserCreateWithoutCustom_recipesInput>;
  update?: Maybe<UserUpdateWithoutCustom_recipesDataInput>;
  upsert?: Maybe<UserUpsertWithoutCustom_recipesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCustom_recipesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profile?: Maybe<ProfileUpdateOneWithoutUserInput>;
  daily_records?: Maybe<DailyRecordUpdateManyWithoutUserInput>;
  custom_ingredients?: Maybe<CustomIngredientUpdateManyWithoutUserInput>;
  ingredient_list?: Maybe<IngredientListUpdateManyWithoutUserInput>;
  favorites?: Maybe<FavoriteFoodUpdateManyWithoutUserInput>;
  weight_logs?: Maybe<WeightLogUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutCustom_recipesInput {
  update: UserUpdateWithoutCustom_recipesDataInput;
  create: UserCreateWithoutCustom_recipesInput;
}

export interface CustomRecipeUpsertWithoutIngredient_listInput {
  update: CustomRecipeUpdateWithoutIngredient_listDataInput;
  create: CustomRecipeCreateWithoutIngredient_listInput;
}

export interface IngredientListUpsertWithWhereUniqueWithoutUserInput {
  where: IngredientListWhereUniqueInput;
  update: IngredientListUpdateWithoutUserDataInput;
  create: IngredientListCreateWithoutUserInput;
}

export interface IngredientListScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  recipe_id?: Maybe<String>;
  recipe_id_not?: Maybe<String>;
  recipe_id_in?: Maybe<String[] | String>;
  recipe_id_not_in?: Maybe<String[] | String>;
  recipe_id_lt?: Maybe<String>;
  recipe_id_lte?: Maybe<String>;
  recipe_id_gt?: Maybe<String>;
  recipe_id_gte?: Maybe<String>;
  recipe_id_contains?: Maybe<String>;
  recipe_id_not_contains?: Maybe<String>;
  recipe_id_starts_with?: Maybe<String>;
  recipe_id_not_starts_with?: Maybe<String>;
  recipe_id_ends_with?: Maybe<String>;
  recipe_id_not_ends_with?: Maybe<String>;
  ingredient_id?: Maybe<String>;
  ingredient_id_not?: Maybe<String>;
  ingredient_id_in?: Maybe<String[] | String>;
  ingredient_id_not_in?: Maybe<String[] | String>;
  ingredient_id_lt?: Maybe<String>;
  ingredient_id_lte?: Maybe<String>;
  ingredient_id_gt?: Maybe<String>;
  ingredient_id_gte?: Maybe<String>;
  ingredient_id_contains?: Maybe<String>;
  ingredient_id_not_contains?: Maybe<String>;
  ingredient_id_starts_with?: Maybe<String>;
  ingredient_id_not_starts_with?: Maybe<String>;
  ingredient_id_ends_with?: Maybe<String>;
  ingredient_id_not_ends_with?: Maybe<String>;
  custom?: Maybe<Boolean>;
  custom_not?: Maybe<Boolean>;
  amount?: Maybe<Float>;
  amount_not?: Maybe<Float>;
  amount_in?: Maybe<Float[] | Float>;
  amount_not_in?: Maybe<Float[] | Float>;
  amount_lt?: Maybe<Float>;
  amount_lte?: Maybe<Float>;
  amount_gt?: Maybe<Float>;
  amount_gte?: Maybe<Float>;
  unit?: Maybe<String>;
  unit_not?: Maybe<String>;
  unit_in?: Maybe<String[] | String>;
  unit_not_in?: Maybe<String[] | String>;
  unit_lt?: Maybe<String>;
  unit_lte?: Maybe<String>;
  unit_gt?: Maybe<String>;
  unit_gte?: Maybe<String>;
  unit_contains?: Maybe<String>;
  unit_not_contains?: Maybe<String>;
  unit_starts_with?: Maybe<String>;
  unit_not_starts_with?: Maybe<String>;
  unit_ends_with?: Maybe<String>;
  unit_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    IngredientListScalarWhereInput[] | IngredientListScalarWhereInput
  >;
  OR?: Maybe<IngredientListScalarWhereInput[] | IngredientListScalarWhereInput>;
  NOT?: Maybe<
    IngredientListScalarWhereInput[] | IngredientListScalarWhereInput
  >;
}

export interface IngredientListUpdateManyWithWhereNestedInput {
  where: IngredientListScalarWhereInput;
  data: IngredientListUpdateManyDataInput;
}

export interface IngredientListUpdateManyDataInput {
  user_id?: Maybe<String>;
  recipe_id?: Maybe<String>;
  ingredient_id?: Maybe<String>;
  custom?: Maybe<Boolean>;
  amount?: Maybe<Float>;
  unit?: Maybe<String>;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput;
  create: PostCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutUserDataInput;
  create: CommentCreateWithoutUserInput;
}

export interface UserUpsertWithoutIngredient_listInput {
  update: UserUpdateWithoutIngredient_listDataInput;
  create: UserCreateWithoutIngredient_listInput;
}

export interface IngredientListUpsertWithWhereUniqueWithoutRecipeInput {
  where: IngredientListWhereUniqueInput;
  update: IngredientListUpdateWithoutRecipeDataInput;
  create: IngredientListCreateWithoutRecipeInput;
}

export interface CustomRecipeUpsertWithWhereUniqueWithoutUserInput {
  where: CustomRecipeWhereUniqueInput;
  update: CustomRecipeUpdateWithoutUserDataInput;
  create: CustomRecipeCreateWithoutUserInput;
}

export interface CustomRecipeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  portions?: Maybe<Int>;
  portions_not?: Maybe<Int>;
  portions_in?: Maybe<Int[] | Int>;
  portions_not_in?: Maybe<Int[] | Int>;
  portions_lt?: Maybe<Int>;
  portions_lte?: Maybe<Int>;
  portions_gt?: Maybe<Int>;
  portions_gte?: Maybe<Int>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CustomRecipeScalarWhereInput[] | CustomRecipeScalarWhereInput>;
  OR?: Maybe<CustomRecipeScalarWhereInput[] | CustomRecipeScalarWhereInput>;
  NOT?: Maybe<CustomRecipeScalarWhereInput[] | CustomRecipeScalarWhereInput>;
}

export interface CustomRecipeUpdateManyWithWhereNestedInput {
  where: CustomRecipeScalarWhereInput;
  data: CustomRecipeUpdateManyDataInput;
}

export interface CustomRecipeUpdateManyDataInput {
  name?: Maybe<String>;
  user_id?: Maybe<String>;
  portions?: Maybe<Int>;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface CommentUpdateManyMutationInput {
  user_id?: Maybe<String>;
  likeCount?: Maybe<Int>;
  body?: Maybe<String>;
}

export interface CustomIngredientCreateInput {
  id?: Maybe<ID_Input>;
  user_id: String;
  name: String;
  description: String;
  fat: Int;
  carbs: Int;
  protein: Int;
  fiber: Int;
  calories: Int;
  user: UserCreateOneWithoutCustom_ingredientsInput;
}

export interface UserCreateOneWithoutCustom_ingredientsInput {
  create?: Maybe<UserCreateWithoutCustom_ingredientsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCustom_ingredientsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  profile?: Maybe<ProfileCreateOneWithoutUserInput>;
  daily_records?: Maybe<DailyRecordCreateManyWithoutUserInput>;
  custom_recipes?: Maybe<CustomRecipeCreateManyWithoutUserInput>;
  ingredient_list?: Maybe<IngredientListCreateManyWithoutUserInput>;
  favorites?: Maybe<FavoriteFoodCreateManyWithoutUserInput>;
  weight_logs?: Maybe<WeightLogCreateManyWithoutUserInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
}

export interface CustomIngredientUpdateInput {
  user_id?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  fat?: Maybe<Int>;
  carbs?: Maybe<Int>;
  protein?: Maybe<Int>;
  fiber?: Maybe<Int>;
  calories?: Maybe<Int>;
  user?: Maybe<UserUpdateOneRequiredWithoutCustom_ingredientsInput>;
}

export interface UserUpdateOneRequiredWithoutCustom_ingredientsInput {
  create?: Maybe<UserCreateWithoutCustom_ingredientsInput>;
  update?: Maybe<UserUpdateWithoutCustom_ingredientsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCustom_ingredientsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCustom_ingredientsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profile?: Maybe<ProfileUpdateOneWithoutUserInput>;
  daily_records?: Maybe<DailyRecordUpdateManyWithoutUserInput>;
  custom_recipes?: Maybe<CustomRecipeUpdateManyWithoutUserInput>;
  ingredient_list?: Maybe<IngredientListUpdateManyWithoutUserInput>;
  favorites?: Maybe<FavoriteFoodUpdateManyWithoutUserInput>;
  weight_logs?: Maybe<WeightLogUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutCustom_ingredientsInput {
  update: UserUpdateWithoutCustom_ingredientsDataInput;
  create: UserCreateWithoutCustom_ingredientsInput;
}

export interface CustomIngredientUpdateManyMutationInput {
  user_id?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  fat?: Maybe<Int>;
  carbs?: Maybe<Int>;
  protein?: Maybe<Int>;
  fiber?: Maybe<Int>;
  calories?: Maybe<Int>;
}

export interface CustomRecipeCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  user_id: String;
  portions: Int;
  user: UserCreateOneWithoutCustom_recipesInput;
  ingredient_list?: Maybe<IngredientListCreateManyWithoutRecipeInput>;
}

export interface CustomRecipeUpdateInput {
  name?: Maybe<String>;
  user_id?: Maybe<String>;
  portions?: Maybe<Int>;
  user?: Maybe<UserUpdateOneRequiredWithoutCustom_recipesInput>;
  ingredient_list?: Maybe<IngredientListUpdateManyWithoutRecipeInput>;
}

export interface CustomRecipeUpdateManyMutationInput {
  name?: Maybe<String>;
  user_id?: Maybe<String>;
  portions?: Maybe<Int>;
}

export interface DailyRecordCreateInput {
  id?: Maybe<ID_Input>;
  user_id: String;
  date: String;
  calories: Int;
  fat: Int;
  carbs: Int;
  fiber: Int;
  protein: Int;
  food_string: String;
  meal_type: String;
  user: UserCreateOneWithoutDaily_recordsInput;
}

export interface UserCreateOneWithoutDaily_recordsInput {
  create?: Maybe<UserCreateWithoutDaily_recordsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutDaily_recordsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  profile?: Maybe<ProfileCreateOneWithoutUserInput>;
  custom_recipes?: Maybe<CustomRecipeCreateManyWithoutUserInput>;
  custom_ingredients?: Maybe<CustomIngredientCreateManyWithoutUserInput>;
  ingredient_list?: Maybe<IngredientListCreateManyWithoutUserInput>;
  favorites?: Maybe<FavoriteFoodCreateManyWithoutUserInput>;
  weight_logs?: Maybe<WeightLogCreateManyWithoutUserInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
}

export interface DailyRecordUpdateInput {
  user_id?: Maybe<String>;
  date?: Maybe<String>;
  calories?: Maybe<Int>;
  fat?: Maybe<Int>;
  carbs?: Maybe<Int>;
  fiber?: Maybe<Int>;
  protein?: Maybe<Int>;
  food_string?: Maybe<String>;
  meal_type?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutDaily_recordsInput>;
}

export interface UserUpdateOneRequiredWithoutDaily_recordsInput {
  create?: Maybe<UserCreateWithoutDaily_recordsInput>;
  update?: Maybe<UserUpdateWithoutDaily_recordsDataInput>;
  upsert?: Maybe<UserUpsertWithoutDaily_recordsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutDaily_recordsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profile?: Maybe<ProfileUpdateOneWithoutUserInput>;
  custom_recipes?: Maybe<CustomRecipeUpdateManyWithoutUserInput>;
  custom_ingredients?: Maybe<CustomIngredientUpdateManyWithoutUserInput>;
  ingredient_list?: Maybe<IngredientListUpdateManyWithoutUserInput>;
  favorites?: Maybe<FavoriteFoodUpdateManyWithoutUserInput>;
  weight_logs?: Maybe<WeightLogUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutDaily_recordsInput {
  update: UserUpdateWithoutDaily_recordsDataInput;
  create: UserCreateWithoutDaily_recordsInput;
}

export interface DailyRecordUpdateManyMutationInput {
  user_id?: Maybe<String>;
  date?: Maybe<String>;
  calories?: Maybe<Int>;
  fat?: Maybe<Int>;
  carbs?: Maybe<Int>;
  fiber?: Maybe<Int>;
  protein?: Maybe<Int>;
  food_string?: Maybe<String>;
  meal_type?: Maybe<String>;
}

export interface FavoriteFoodCreateInput {
  id?: Maybe<ID_Input>;
  food_id: String;
  custom: Boolean;
  user_id: String;
  user: UserCreateOneWithoutFavoritesInput;
}

export interface UserCreateOneWithoutFavoritesInput {
  create?: Maybe<UserCreateWithoutFavoritesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutFavoritesInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  profile?: Maybe<ProfileCreateOneWithoutUserInput>;
  daily_records?: Maybe<DailyRecordCreateManyWithoutUserInput>;
  custom_recipes?: Maybe<CustomRecipeCreateManyWithoutUserInput>;
  custom_ingredients?: Maybe<CustomIngredientCreateManyWithoutUserInput>;
  ingredient_list?: Maybe<IngredientListCreateManyWithoutUserInput>;
  weight_logs?: Maybe<WeightLogCreateManyWithoutUserInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
}

export interface FavoriteFoodUpdateInput {
  food_id?: Maybe<String>;
  custom?: Maybe<Boolean>;
  user_id?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutFavoritesInput>;
}

export interface UserUpdateOneRequiredWithoutFavoritesInput {
  create?: Maybe<UserCreateWithoutFavoritesInput>;
  update?: Maybe<UserUpdateWithoutFavoritesDataInput>;
  upsert?: Maybe<UserUpsertWithoutFavoritesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutFavoritesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profile?: Maybe<ProfileUpdateOneWithoutUserInput>;
  daily_records?: Maybe<DailyRecordUpdateManyWithoutUserInput>;
  custom_recipes?: Maybe<CustomRecipeUpdateManyWithoutUserInput>;
  custom_ingredients?: Maybe<CustomIngredientUpdateManyWithoutUserInput>;
  ingredient_list?: Maybe<IngredientListUpdateManyWithoutUserInput>;
  weight_logs?: Maybe<WeightLogUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutFavoritesInput {
  update: UserUpdateWithoutFavoritesDataInput;
  create: UserCreateWithoutFavoritesInput;
}

export interface FavoriteFoodUpdateManyMutationInput {
  food_id?: Maybe<String>;
  custom?: Maybe<Boolean>;
  user_id?: Maybe<String>;
}

export interface IngredientListCreateInput {
  id?: Maybe<ID_Input>;
  user_id: String;
  recipe_id: String;
  ingredient_id: String;
  custom: Boolean;
  amount: Float;
  unit: String;
  recipe: CustomRecipeCreateOneWithoutIngredient_listInput;
  user: UserCreateOneWithoutIngredient_listInput;
}

export interface IngredientListUpdateInput {
  user_id?: Maybe<String>;
  recipe_id?: Maybe<String>;
  ingredient_id?: Maybe<String>;
  custom?: Maybe<Boolean>;
  amount?: Maybe<Float>;
  unit?: Maybe<String>;
  recipe?: Maybe<CustomRecipeUpdateOneRequiredWithoutIngredient_listInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutIngredient_listInput>;
}

export interface IngredientListUpdateManyMutationInput {
  user_id?: Maybe<String>;
  recipe_id?: Maybe<String>;
  ingredient_id?: Maybe<String>;
  custom?: Maybe<Boolean>;
  amount?: Maybe<Float>;
  unit?: Maybe<String>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutPostsInput;
  user_id: String;
  viewCount?: Maybe<Int>;
  likeCount?: Maybe<Int>;
  title: String;
  body: String;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
}

export interface PostUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  user_id?: Maybe<String>;
  viewCount?: Maybe<Int>;
  likeCount?: Maybe<Int>;
  title?: Maybe<String>;
  body?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
}

export interface PostUpdateManyMutationInput {
  user_id?: Maybe<String>;
  viewCount?: Maybe<Int>;
  likeCount?: Maybe<Int>;
  title?: Maybe<String>;
  body?: Maybe<String>;
}

export interface ProfileCreateInput {
  id?: Maybe<ID_Input>;
  user_id: String;
  age: Int;
  weight: Int;
  height: Int;
  gender?: Maybe<Boolean>;
  goal_weight?: Maybe<Int>;
  activity_level?: Maybe<Int>;
  diet?: Maybe<String>;
  fat?: Maybe<Int>;
  carbs?: Maybe<Int>;
  protein?: Maybe<Int>;
  fiber?: Maybe<Int>;
  calories?: Maybe<Int>;
  user: UserCreateOneWithoutProfileInput;
}

export interface UserCreateOneWithoutProfileInput {
  create?: Maybe<UserCreateWithoutProfileInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutProfileInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  daily_records?: Maybe<DailyRecordCreateManyWithoutUserInput>;
  custom_recipes?: Maybe<CustomRecipeCreateManyWithoutUserInput>;
  custom_ingredients?: Maybe<CustomIngredientCreateManyWithoutUserInput>;
  ingredient_list?: Maybe<IngredientListCreateManyWithoutUserInput>;
  favorites?: Maybe<FavoriteFoodCreateManyWithoutUserInput>;
  weight_logs?: Maybe<WeightLogCreateManyWithoutUserInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
}

export interface ProfileUpdateInput {
  user_id?: Maybe<String>;
  age?: Maybe<Int>;
  weight?: Maybe<Int>;
  height?: Maybe<Int>;
  gender?: Maybe<Boolean>;
  goal_weight?: Maybe<Int>;
  activity_level?: Maybe<Int>;
  diet?: Maybe<String>;
  fat?: Maybe<Int>;
  carbs?: Maybe<Int>;
  protein?: Maybe<Int>;
  fiber?: Maybe<Int>;
  calories?: Maybe<Int>;
  user?: Maybe<UserUpdateOneRequiredWithoutProfileInput>;
}

export interface UserUpdateOneRequiredWithoutProfileInput {
  create?: Maybe<UserCreateWithoutProfileInput>;
  update?: Maybe<UserUpdateWithoutProfileDataInput>;
  upsert?: Maybe<UserUpsertWithoutProfileInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutProfileDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  daily_records?: Maybe<DailyRecordUpdateManyWithoutUserInput>;
  custom_recipes?: Maybe<CustomRecipeUpdateManyWithoutUserInput>;
  custom_ingredients?: Maybe<CustomIngredientUpdateManyWithoutUserInput>;
  ingredient_list?: Maybe<IngredientListUpdateManyWithoutUserInput>;
  favorites?: Maybe<FavoriteFoodUpdateManyWithoutUserInput>;
  weight_logs?: Maybe<WeightLogUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutProfileInput {
  update: UserUpdateWithoutProfileDataInput;
  create: UserCreateWithoutProfileInput;
}

export interface ProfileUpdateManyMutationInput {
  user_id?: Maybe<String>;
  age?: Maybe<Int>;
  weight?: Maybe<Int>;
  height?: Maybe<Int>;
  gender?: Maybe<Boolean>;
  goal_weight?: Maybe<Int>;
  activity_level?: Maybe<Int>;
  diet?: Maybe<String>;
  fat?: Maybe<Int>;
  carbs?: Maybe<Int>;
  protein?: Maybe<Int>;
  fiber?: Maybe<Int>;
  calories?: Maybe<Int>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  profile?: Maybe<ProfileCreateOneWithoutUserInput>;
  daily_records?: Maybe<DailyRecordCreateManyWithoutUserInput>;
  custom_recipes?: Maybe<CustomRecipeCreateManyWithoutUserInput>;
  custom_ingredients?: Maybe<CustomIngredientCreateManyWithoutUserInput>;
  ingredient_list?: Maybe<IngredientListCreateManyWithoutUserInput>;
  favorites?: Maybe<FavoriteFoodCreateManyWithoutUserInput>;
  weight_logs?: Maybe<WeightLogCreateManyWithoutUserInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profile?: Maybe<ProfileUpdateOneWithoutUserInput>;
  daily_records?: Maybe<DailyRecordUpdateManyWithoutUserInput>;
  custom_recipes?: Maybe<CustomRecipeUpdateManyWithoutUserInput>;
  custom_ingredients?: Maybe<CustomIngredientUpdateManyWithoutUserInput>;
  ingredient_list?: Maybe<IngredientListUpdateManyWithoutUserInput>;
  favorites?: Maybe<FavoriteFoodUpdateManyWithoutUserInput>;
  weight_logs?: Maybe<WeightLogUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface WeightLogCreateInput {
  id?: Maybe<ID_Input>;
  date: String;
  user_id: String;
  current_weight: Int;
  user: UserCreateOneWithoutWeight_logsInput;
}

export interface UserCreateOneWithoutWeight_logsInput {
  create?: Maybe<UserCreateWithoutWeight_logsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutWeight_logsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  profile?: Maybe<ProfileCreateOneWithoutUserInput>;
  daily_records?: Maybe<DailyRecordCreateManyWithoutUserInput>;
  custom_recipes?: Maybe<CustomRecipeCreateManyWithoutUserInput>;
  custom_ingredients?: Maybe<CustomIngredientCreateManyWithoutUserInput>;
  ingredient_list?: Maybe<IngredientListCreateManyWithoutUserInput>;
  favorites?: Maybe<FavoriteFoodCreateManyWithoutUserInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
}

export interface WeightLogUpdateInput {
  date?: Maybe<String>;
  user_id?: Maybe<String>;
  current_weight?: Maybe<Int>;
  user?: Maybe<UserUpdateOneRequiredWithoutWeight_logsInput>;
}

export interface UserUpdateOneRequiredWithoutWeight_logsInput {
  create?: Maybe<UserCreateWithoutWeight_logsInput>;
  update?: Maybe<UserUpdateWithoutWeight_logsDataInput>;
  upsert?: Maybe<UserUpsertWithoutWeight_logsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutWeight_logsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profile?: Maybe<ProfileUpdateOneWithoutUserInput>;
  daily_records?: Maybe<DailyRecordUpdateManyWithoutUserInput>;
  custom_recipes?: Maybe<CustomRecipeUpdateManyWithoutUserInput>;
  custom_ingredients?: Maybe<CustomIngredientUpdateManyWithoutUserInput>;
  ingredient_list?: Maybe<IngredientListUpdateManyWithoutUserInput>;
  favorites?: Maybe<FavoriteFoodUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutWeight_logsInput {
  update: UserUpdateWithoutWeight_logsDataInput;
  create: UserCreateWithoutWeight_logsInput;
}

export interface WeightLogUpdateManyMutationInput {
  date?: Maybe<String>;
  user_id?: Maybe<String>;
  current_weight?: Maybe<Int>;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface CustomIngredientSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CustomIngredientWhereInput>;
  AND?: Maybe<
    | CustomIngredientSubscriptionWhereInput[]
    | CustomIngredientSubscriptionWhereInput
  >;
  OR?: Maybe<
    | CustomIngredientSubscriptionWhereInput[]
    | CustomIngredientSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | CustomIngredientSubscriptionWhereInput[]
    | CustomIngredientSubscriptionWhereInput
  >;
}

export interface CustomRecipeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CustomRecipeWhereInput>;
  AND?: Maybe<
    CustomRecipeSubscriptionWhereInput[] | CustomRecipeSubscriptionWhereInput
  >;
  OR?: Maybe<
    CustomRecipeSubscriptionWhereInput[] | CustomRecipeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    CustomRecipeSubscriptionWhereInput[] | CustomRecipeSubscriptionWhereInput
  >;
}

export interface DailyRecordSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DailyRecordWhereInput>;
  AND?: Maybe<
    DailyRecordSubscriptionWhereInput[] | DailyRecordSubscriptionWhereInput
  >;
  OR?: Maybe<
    DailyRecordSubscriptionWhereInput[] | DailyRecordSubscriptionWhereInput
  >;
  NOT?: Maybe<
    DailyRecordSubscriptionWhereInput[] | DailyRecordSubscriptionWhereInput
  >;
}

export interface FavoriteFoodSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FavoriteFoodWhereInput>;
  AND?: Maybe<
    FavoriteFoodSubscriptionWhereInput[] | FavoriteFoodSubscriptionWhereInput
  >;
  OR?: Maybe<
    FavoriteFoodSubscriptionWhereInput[] | FavoriteFoodSubscriptionWhereInput
  >;
  NOT?: Maybe<
    FavoriteFoodSubscriptionWhereInput[] | FavoriteFoodSubscriptionWhereInput
  >;
}

export interface IngredientListSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<IngredientListWhereInput>;
  AND?: Maybe<
    | IngredientListSubscriptionWhereInput[]
    | IngredientListSubscriptionWhereInput
  >;
  OR?: Maybe<
    | IngredientListSubscriptionWhereInput[]
    | IngredientListSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | IngredientListSubscriptionWhereInput[]
    | IngredientListSubscriptionWhereInput
  >;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface ProfileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProfileWhereInput>;
  AND?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
  OR?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
  NOT?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface WeightLogSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WeightLogWhereInput>;
  AND?: Maybe<
    WeightLogSubscriptionWhereInput[] | WeightLogSubscriptionWhereInput
  >;
  OR?: Maybe<
    WeightLogSubscriptionWhereInput[] | WeightLogSubscriptionWhereInput
  >;
  NOT?: Maybe<
    WeightLogSubscriptionWhereInput[] | WeightLogSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Comment {
  id: ID_Output;
  user_id: String;
  likeCount?: Int;
  body: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  user_id: () => Promise<String>;
  post: <T = PostPromise>() => T;
  likeCount: () => Promise<Int>;
  body: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  user_id: () => Promise<AsyncIterator<String>>;
  post: <T = PostSubscription>() => T;
  likeCount: () => Promise<AsyncIterator<Int>>;
  body: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  user_id: () => Promise<String>;
  post: <T = PostPromise>() => T;
  likeCount: () => Promise<Int>;
  body: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  profile: <T = ProfilePromise>() => T;
  daily_records: <T = FragmentableArray<DailyRecord>>(args?: {
    where?: DailyRecordWhereInput;
    orderBy?: DailyRecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  custom_recipes: <T = FragmentableArray<CustomRecipe>>(args?: {
    where?: CustomRecipeWhereInput;
    orderBy?: CustomRecipeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  custom_ingredients: <T = FragmentableArray<CustomIngredient>>(args?: {
    where?: CustomIngredientWhereInput;
    orderBy?: CustomIngredientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  ingredient_list: <T = FragmentableArray<IngredientList>>(args?: {
    where?: IngredientListWhereInput;
    orderBy?: IngredientListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favorites: <T = FragmentableArray<FavoriteFood>>(args?: {
    where?: FavoriteFoodWhereInput;
    orderBy?: FavoriteFoodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  weight_logs: <T = FragmentableArray<WeightLog>>(args?: {
    where?: WeightLogWhereInput;
    orderBy?: WeightLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  profile: <T = ProfileSubscription>() => T;
  daily_records: <T = Promise<AsyncIterator<DailyRecordSubscription>>>(args?: {
    where?: DailyRecordWhereInput;
    orderBy?: DailyRecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  custom_recipes: <
    T = Promise<AsyncIterator<CustomRecipeSubscription>>
  >(args?: {
    where?: CustomRecipeWhereInput;
    orderBy?: CustomRecipeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  custom_ingredients: <
    T = Promise<AsyncIterator<CustomIngredientSubscription>>
  >(args?: {
    where?: CustomIngredientWhereInput;
    orderBy?: CustomIngredientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  ingredient_list: <
    T = Promise<AsyncIterator<IngredientListSubscription>>
  >(args?: {
    where?: IngredientListWhereInput;
    orderBy?: IngredientListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favorites: <T = Promise<AsyncIterator<FavoriteFoodSubscription>>>(args?: {
    where?: FavoriteFoodWhereInput;
    orderBy?: FavoriteFoodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  weight_logs: <T = Promise<AsyncIterator<WeightLogSubscription>>>(args?: {
    where?: WeightLogWhereInput;
    orderBy?: WeightLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  profile: <T = ProfilePromise>() => T;
  daily_records: <T = FragmentableArray<DailyRecord>>(args?: {
    where?: DailyRecordWhereInput;
    orderBy?: DailyRecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  custom_recipes: <T = FragmentableArray<CustomRecipe>>(args?: {
    where?: CustomRecipeWhereInput;
    orderBy?: CustomRecipeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  custom_ingredients: <T = FragmentableArray<CustomIngredient>>(args?: {
    where?: CustomIngredientWhereInput;
    orderBy?: CustomIngredientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  ingredient_list: <T = FragmentableArray<IngredientList>>(args?: {
    where?: IngredientListWhereInput;
    orderBy?: IngredientListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favorites: <T = FragmentableArray<FavoriteFood>>(args?: {
    where?: FavoriteFoodWhereInput;
    orderBy?: FavoriteFoodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  weight_logs: <T = FragmentableArray<WeightLog>>(args?: {
    where?: WeightLogWhereInput;
    orderBy?: WeightLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Profile {
  id: ID_Output;
  user_id: String;
  age: Int;
  weight: Int;
  height: Int;
  gender?: Boolean;
  goal_weight?: Int;
  activity_level?: Int;
  diet?: String;
  fat?: Int;
  carbs?: Int;
  protein?: Int;
  fiber?: Int;
  calories?: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ProfilePromise extends Promise<Profile>, Fragmentable {
  id: () => Promise<ID_Output>;
  user_id: () => Promise<String>;
  age: () => Promise<Int>;
  weight: () => Promise<Int>;
  height: () => Promise<Int>;
  gender: () => Promise<Boolean>;
  goal_weight: () => Promise<Int>;
  activity_level: () => Promise<Int>;
  diet: () => Promise<String>;
  fat: () => Promise<Int>;
  carbs: () => Promise<Int>;
  protein: () => Promise<Int>;
  fiber: () => Promise<Int>;
  calories: () => Promise<Int>;
  user: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ProfileSubscription
  extends Promise<AsyncIterator<Profile>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user_id: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  weight: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Boolean>>;
  goal_weight: () => Promise<AsyncIterator<Int>>;
  activity_level: () => Promise<AsyncIterator<Int>>;
  diet: () => Promise<AsyncIterator<String>>;
  fat: () => Promise<AsyncIterator<Int>>;
  carbs: () => Promise<AsyncIterator<Int>>;
  protein: () => Promise<AsyncIterator<Int>>;
  fiber: () => Promise<AsyncIterator<Int>>;
  calories: () => Promise<AsyncIterator<Int>>;
  user: <T = UserSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProfileNullablePromise
  extends Promise<Profile | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user_id: () => Promise<String>;
  age: () => Promise<Int>;
  weight: () => Promise<Int>;
  height: () => Promise<Int>;
  gender: () => Promise<Boolean>;
  goal_weight: () => Promise<Int>;
  activity_level: () => Promise<Int>;
  diet: () => Promise<String>;
  fat: () => Promise<Int>;
  carbs: () => Promise<Int>;
  protein: () => Promise<Int>;
  fiber: () => Promise<Int>;
  calories: () => Promise<Int>;
  user: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface DailyRecord {
  id: ID_Output;
  user_id: String;
  date: String;
  calories: Int;
  fat: Int;
  carbs: Int;
  fiber: Int;
  protein: Int;
  food_string: String;
  meal_type: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface DailyRecordPromise extends Promise<DailyRecord>, Fragmentable {
  id: () => Promise<ID_Output>;
  user_id: () => Promise<String>;
  date: () => Promise<String>;
  calories: () => Promise<Int>;
  fat: () => Promise<Int>;
  carbs: () => Promise<Int>;
  fiber: () => Promise<Int>;
  protein: () => Promise<Int>;
  food_string: () => Promise<String>;
  meal_type: () => Promise<String>;
  user: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface DailyRecordSubscription
  extends Promise<AsyncIterator<DailyRecord>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user_id: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<String>>;
  calories: () => Promise<AsyncIterator<Int>>;
  fat: () => Promise<AsyncIterator<Int>>;
  carbs: () => Promise<AsyncIterator<Int>>;
  fiber: () => Promise<AsyncIterator<Int>>;
  protein: () => Promise<AsyncIterator<Int>>;
  food_string: () => Promise<AsyncIterator<String>>;
  meal_type: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DailyRecordNullablePromise
  extends Promise<DailyRecord | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user_id: () => Promise<String>;
  date: () => Promise<String>;
  calories: () => Promise<Int>;
  fat: () => Promise<Int>;
  carbs: () => Promise<Int>;
  fiber: () => Promise<Int>;
  protein: () => Promise<Int>;
  food_string: () => Promise<String>;
  meal_type: () => Promise<String>;
  user: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CustomRecipe {
  id: ID_Output;
  name: String;
  user_id: String;
  portions: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface CustomRecipePromise
  extends Promise<CustomRecipe>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  user_id: () => Promise<String>;
  portions: () => Promise<Int>;
  user: <T = UserPromise>() => T;
  ingredient_list: <T = FragmentableArray<IngredientList>>(args?: {
    where?: IngredientListWhereInput;
    orderBy?: IngredientListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CustomRecipeSubscription
  extends Promise<AsyncIterator<CustomRecipe>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  user_id: () => Promise<AsyncIterator<String>>;
  portions: () => Promise<AsyncIterator<Int>>;
  user: <T = UserSubscription>() => T;
  ingredient_list: <
    T = Promise<AsyncIterator<IngredientListSubscription>>
  >(args?: {
    where?: IngredientListWhereInput;
    orderBy?: IngredientListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CustomRecipeNullablePromise
  extends Promise<CustomRecipe | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  user_id: () => Promise<String>;
  portions: () => Promise<Int>;
  user: <T = UserPromise>() => T;
  ingredient_list: <T = FragmentableArray<IngredientList>>(args?: {
    where?: IngredientListWhereInput;
    orderBy?: IngredientListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface IngredientList {
  id: ID_Output;
  user_id: String;
  recipe_id: String;
  ingredient_id: String;
  custom: Boolean;
  amount: Float;
  unit: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface IngredientListPromise
  extends Promise<IngredientList>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user_id: () => Promise<String>;
  recipe_id: () => Promise<String>;
  ingredient_id: () => Promise<String>;
  custom: () => Promise<Boolean>;
  amount: () => Promise<Float>;
  unit: () => Promise<String>;
  recipe: <T = CustomRecipePromise>() => T;
  user: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface IngredientListSubscription
  extends Promise<AsyncIterator<IngredientList>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user_id: () => Promise<AsyncIterator<String>>;
  recipe_id: () => Promise<AsyncIterator<String>>;
  ingredient_id: () => Promise<AsyncIterator<String>>;
  custom: () => Promise<AsyncIterator<Boolean>>;
  amount: () => Promise<AsyncIterator<Float>>;
  unit: () => Promise<AsyncIterator<String>>;
  recipe: <T = CustomRecipeSubscription>() => T;
  user: <T = UserSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface IngredientListNullablePromise
  extends Promise<IngredientList | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user_id: () => Promise<String>;
  recipe_id: () => Promise<String>;
  ingredient_id: () => Promise<String>;
  custom: () => Promise<Boolean>;
  amount: () => Promise<Float>;
  unit: () => Promise<String>;
  recipe: <T = CustomRecipePromise>() => T;
  user: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CustomIngredient {
  id: ID_Output;
  user_id: String;
  name: String;
  description: String;
  fat: Int;
  carbs: Int;
  protein: Int;
  fiber: Int;
  calories: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface CustomIngredientPromise
  extends Promise<CustomIngredient>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user_id: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  fat: () => Promise<Int>;
  carbs: () => Promise<Int>;
  protein: () => Promise<Int>;
  fiber: () => Promise<Int>;
  calories: () => Promise<Int>;
  user: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CustomIngredientSubscription
  extends Promise<AsyncIterator<CustomIngredient>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user_id: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  fat: () => Promise<AsyncIterator<Int>>;
  carbs: () => Promise<AsyncIterator<Int>>;
  protein: () => Promise<AsyncIterator<Int>>;
  fiber: () => Promise<AsyncIterator<Int>>;
  calories: () => Promise<AsyncIterator<Int>>;
  user: <T = UserSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CustomIngredientNullablePromise
  extends Promise<CustomIngredient | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user_id: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  fat: () => Promise<Int>;
  carbs: () => Promise<Int>;
  protein: () => Promise<Int>;
  fiber: () => Promise<Int>;
  calories: () => Promise<Int>;
  user: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface FavoriteFood {
  id: ID_Output;
  food_id: String;
  custom: Boolean;
  user_id: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface FavoriteFoodPromise
  extends Promise<FavoriteFood>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  food_id: () => Promise<String>;
  custom: () => Promise<Boolean>;
  user_id: () => Promise<String>;
  user: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface FavoriteFoodSubscription
  extends Promise<AsyncIterator<FavoriteFood>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  food_id: () => Promise<AsyncIterator<String>>;
  custom: () => Promise<AsyncIterator<Boolean>>;
  user_id: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FavoriteFoodNullablePromise
  extends Promise<FavoriteFood | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  food_id: () => Promise<String>;
  custom: () => Promise<Boolean>;
  user_id: () => Promise<String>;
  user: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface WeightLog {
  id: ID_Output;
  date: String;
  user_id: String;
  current_weight: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface WeightLogPromise extends Promise<WeightLog>, Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<String>;
  user_id: () => Promise<String>;
  current_weight: () => Promise<Int>;
  user: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface WeightLogSubscription
  extends Promise<AsyncIterator<WeightLog>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<String>>;
  user_id: () => Promise<AsyncIterator<String>>;
  current_weight: () => Promise<AsyncIterator<Int>>;
  user: <T = UserSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WeightLogNullablePromise
  extends Promise<WeightLog | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<String>;
  user_id: () => Promise<String>;
  current_weight: () => Promise<Int>;
  user: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Post {
  id: ID_Output;
  user_id: String;
  viewCount?: Int;
  likeCount?: Int;
  title: String;
  body: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  user_id: () => Promise<String>;
  viewCount: () => Promise<Int>;
  likeCount: () => Promise<Int>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  user_id: () => Promise<AsyncIterator<String>>;
  viewCount: () => Promise<AsyncIterator<Int>>;
  likeCount: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  user_id: () => Promise<String>;
  viewCount: () => Promise<Int>;
  likeCount: () => Promise<Int>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CustomIngredientConnection {
  pageInfo: PageInfo;
  edges: CustomIngredientEdge[];
}

export interface CustomIngredientConnectionPromise
  extends Promise<CustomIngredientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomIngredientEdge>>() => T;
  aggregate: <T = AggregateCustomIngredientPromise>() => T;
}

export interface CustomIngredientConnectionSubscription
  extends Promise<AsyncIterator<CustomIngredientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomIngredientEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomIngredientSubscription>() => T;
}

export interface CustomIngredientEdge {
  node: CustomIngredient;
  cursor: String;
}

export interface CustomIngredientEdgePromise
  extends Promise<CustomIngredientEdge>,
    Fragmentable {
  node: <T = CustomIngredientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomIngredientEdgeSubscription
  extends Promise<AsyncIterator<CustomIngredientEdge>>,
    Fragmentable {
  node: <T = CustomIngredientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCustomIngredient {
  count: Int;
}

export interface AggregateCustomIngredientPromise
  extends Promise<AggregateCustomIngredient>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomIngredientSubscription
  extends Promise<AsyncIterator<AggregateCustomIngredient>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CustomRecipeConnection {
  pageInfo: PageInfo;
  edges: CustomRecipeEdge[];
}

export interface CustomRecipeConnectionPromise
  extends Promise<CustomRecipeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomRecipeEdge>>() => T;
  aggregate: <T = AggregateCustomRecipePromise>() => T;
}

export interface CustomRecipeConnectionSubscription
  extends Promise<AsyncIterator<CustomRecipeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomRecipeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomRecipeSubscription>() => T;
}

export interface CustomRecipeEdge {
  node: CustomRecipe;
  cursor: String;
}

export interface CustomRecipeEdgePromise
  extends Promise<CustomRecipeEdge>,
    Fragmentable {
  node: <T = CustomRecipePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomRecipeEdgeSubscription
  extends Promise<AsyncIterator<CustomRecipeEdge>>,
    Fragmentable {
  node: <T = CustomRecipeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCustomRecipe {
  count: Int;
}

export interface AggregateCustomRecipePromise
  extends Promise<AggregateCustomRecipe>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomRecipeSubscription
  extends Promise<AsyncIterator<AggregateCustomRecipe>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DailyRecordConnection {
  pageInfo: PageInfo;
  edges: DailyRecordEdge[];
}

export interface DailyRecordConnectionPromise
  extends Promise<DailyRecordConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DailyRecordEdge>>() => T;
  aggregate: <T = AggregateDailyRecordPromise>() => T;
}

export interface DailyRecordConnectionSubscription
  extends Promise<AsyncIterator<DailyRecordConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DailyRecordEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDailyRecordSubscription>() => T;
}

export interface DailyRecordEdge {
  node: DailyRecord;
  cursor: String;
}

export interface DailyRecordEdgePromise
  extends Promise<DailyRecordEdge>,
    Fragmentable {
  node: <T = DailyRecordPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DailyRecordEdgeSubscription
  extends Promise<AsyncIterator<DailyRecordEdge>>,
    Fragmentable {
  node: <T = DailyRecordSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDailyRecord {
  count: Int;
}

export interface AggregateDailyRecordPromise
  extends Promise<AggregateDailyRecord>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDailyRecordSubscription
  extends Promise<AsyncIterator<AggregateDailyRecord>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FavoriteFoodConnection {
  pageInfo: PageInfo;
  edges: FavoriteFoodEdge[];
}

export interface FavoriteFoodConnectionPromise
  extends Promise<FavoriteFoodConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FavoriteFoodEdge>>() => T;
  aggregate: <T = AggregateFavoriteFoodPromise>() => T;
}

export interface FavoriteFoodConnectionSubscription
  extends Promise<AsyncIterator<FavoriteFoodConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FavoriteFoodEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFavoriteFoodSubscription>() => T;
}

export interface FavoriteFoodEdge {
  node: FavoriteFood;
  cursor: String;
}

export interface FavoriteFoodEdgePromise
  extends Promise<FavoriteFoodEdge>,
    Fragmentable {
  node: <T = FavoriteFoodPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FavoriteFoodEdgeSubscription
  extends Promise<AsyncIterator<FavoriteFoodEdge>>,
    Fragmentable {
  node: <T = FavoriteFoodSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFavoriteFood {
  count: Int;
}

export interface AggregateFavoriteFoodPromise
  extends Promise<AggregateFavoriteFood>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFavoriteFoodSubscription
  extends Promise<AsyncIterator<AggregateFavoriteFood>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface IngredientListConnection {
  pageInfo: PageInfo;
  edges: IngredientListEdge[];
}

export interface IngredientListConnectionPromise
  extends Promise<IngredientListConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IngredientListEdge>>() => T;
  aggregate: <T = AggregateIngredientListPromise>() => T;
}

export interface IngredientListConnectionSubscription
  extends Promise<AsyncIterator<IngredientListConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IngredientListEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIngredientListSubscription>() => T;
}

export interface IngredientListEdge {
  node: IngredientList;
  cursor: String;
}

export interface IngredientListEdgePromise
  extends Promise<IngredientListEdge>,
    Fragmentable {
  node: <T = IngredientListPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IngredientListEdgeSubscription
  extends Promise<AsyncIterator<IngredientListEdge>>,
    Fragmentable {
  node: <T = IngredientListSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIngredientList {
  count: Int;
}

export interface AggregateIngredientListPromise
  extends Promise<AggregateIngredientList>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIngredientListSubscription
  extends Promise<AsyncIterator<AggregateIngredientList>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProfileConnection {
  pageInfo: PageInfo;
  edges: ProfileEdge[];
}

export interface ProfileConnectionPromise
  extends Promise<ProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProfileEdge>>() => T;
  aggregate: <T = AggregateProfilePromise>() => T;
}

export interface ProfileConnectionSubscription
  extends Promise<AsyncIterator<ProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProfileSubscription>() => T;
}

export interface ProfileEdge {
  node: Profile;
  cursor: String;
}

export interface ProfileEdgePromise extends Promise<ProfileEdge>, Fragmentable {
  node: <T = ProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProfileEdgeSubscription
  extends Promise<AsyncIterator<ProfileEdge>>,
    Fragmentable {
  node: <T = ProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProfile {
  count: Int;
}

export interface AggregateProfilePromise
  extends Promise<AggregateProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProfileSubscription
  extends Promise<AsyncIterator<AggregateProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WeightLogConnection {
  pageInfo: PageInfo;
  edges: WeightLogEdge[];
}

export interface WeightLogConnectionPromise
  extends Promise<WeightLogConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WeightLogEdge>>() => T;
  aggregate: <T = AggregateWeightLogPromise>() => T;
}

export interface WeightLogConnectionSubscription
  extends Promise<AsyncIterator<WeightLogConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WeightLogEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWeightLogSubscription>() => T;
}

export interface WeightLogEdge {
  node: WeightLog;
  cursor: String;
}

export interface WeightLogEdgePromise
  extends Promise<WeightLogEdge>,
    Fragmentable {
  node: <T = WeightLogPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WeightLogEdgeSubscription
  extends Promise<AsyncIterator<WeightLogEdge>>,
    Fragmentable {
  node: <T = WeightLogSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWeightLog {
  count: Int;
}

export interface AggregateWeightLogPromise
  extends Promise<AggregateWeightLog>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWeightLogSubscription
  extends Promise<AsyncIterator<AggregateWeightLog>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  user_id: String;
  likeCount?: Int;
  body: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user_id: () => Promise<String>;
  likeCount: () => Promise<Int>;
  body: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user_id: () => Promise<AsyncIterator<String>>;
  likeCount: () => Promise<AsyncIterator<Int>>;
  body: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CustomIngredientSubscriptionPayload {
  mutation: MutationType;
  node: CustomIngredient;
  updatedFields: String[];
  previousValues: CustomIngredientPreviousValues;
}

export interface CustomIngredientSubscriptionPayloadPromise
  extends Promise<CustomIngredientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomIngredientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomIngredientPreviousValuesPromise>() => T;
}

export interface CustomIngredientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomIngredientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomIngredientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomIngredientPreviousValuesSubscription>() => T;
}

export interface CustomIngredientPreviousValues {
  id: ID_Output;
  user_id: String;
  name: String;
  description: String;
  fat: Int;
  carbs: Int;
  protein: Int;
  fiber: Int;
  calories: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface CustomIngredientPreviousValuesPromise
  extends Promise<CustomIngredientPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user_id: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  fat: () => Promise<Int>;
  carbs: () => Promise<Int>;
  protein: () => Promise<Int>;
  fiber: () => Promise<Int>;
  calories: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CustomIngredientPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomIngredientPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user_id: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  fat: () => Promise<AsyncIterator<Int>>;
  carbs: () => Promise<AsyncIterator<Int>>;
  protein: () => Promise<AsyncIterator<Int>>;
  fiber: () => Promise<AsyncIterator<Int>>;
  calories: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CustomRecipeSubscriptionPayload {
  mutation: MutationType;
  node: CustomRecipe;
  updatedFields: String[];
  previousValues: CustomRecipePreviousValues;
}

export interface CustomRecipeSubscriptionPayloadPromise
  extends Promise<CustomRecipeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomRecipePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomRecipePreviousValuesPromise>() => T;
}

export interface CustomRecipeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomRecipeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomRecipeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomRecipePreviousValuesSubscription>() => T;
}

export interface CustomRecipePreviousValues {
  id: ID_Output;
  name: String;
  user_id: String;
  portions: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface CustomRecipePreviousValuesPromise
  extends Promise<CustomRecipePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  user_id: () => Promise<String>;
  portions: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CustomRecipePreviousValuesSubscription
  extends Promise<AsyncIterator<CustomRecipePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  user_id: () => Promise<AsyncIterator<String>>;
  portions: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DailyRecordSubscriptionPayload {
  mutation: MutationType;
  node: DailyRecord;
  updatedFields: String[];
  previousValues: DailyRecordPreviousValues;
}

export interface DailyRecordSubscriptionPayloadPromise
  extends Promise<DailyRecordSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DailyRecordPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DailyRecordPreviousValuesPromise>() => T;
}

export interface DailyRecordSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DailyRecordSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DailyRecordSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DailyRecordPreviousValuesSubscription>() => T;
}

export interface DailyRecordPreviousValues {
  id: ID_Output;
  user_id: String;
  date: String;
  calories: Int;
  fat: Int;
  carbs: Int;
  fiber: Int;
  protein: Int;
  food_string: String;
  meal_type: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface DailyRecordPreviousValuesPromise
  extends Promise<DailyRecordPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user_id: () => Promise<String>;
  date: () => Promise<String>;
  calories: () => Promise<Int>;
  fat: () => Promise<Int>;
  carbs: () => Promise<Int>;
  fiber: () => Promise<Int>;
  protein: () => Promise<Int>;
  food_string: () => Promise<String>;
  meal_type: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface DailyRecordPreviousValuesSubscription
  extends Promise<AsyncIterator<DailyRecordPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user_id: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<String>>;
  calories: () => Promise<AsyncIterator<Int>>;
  fat: () => Promise<AsyncIterator<Int>>;
  carbs: () => Promise<AsyncIterator<Int>>;
  fiber: () => Promise<AsyncIterator<Int>>;
  protein: () => Promise<AsyncIterator<Int>>;
  food_string: () => Promise<AsyncIterator<String>>;
  meal_type: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FavoriteFoodSubscriptionPayload {
  mutation: MutationType;
  node: FavoriteFood;
  updatedFields: String[];
  previousValues: FavoriteFoodPreviousValues;
}

export interface FavoriteFoodSubscriptionPayloadPromise
  extends Promise<FavoriteFoodSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FavoriteFoodPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FavoriteFoodPreviousValuesPromise>() => T;
}

export interface FavoriteFoodSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FavoriteFoodSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FavoriteFoodSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FavoriteFoodPreviousValuesSubscription>() => T;
}

export interface FavoriteFoodPreviousValues {
  id: ID_Output;
  food_id: String;
  custom: Boolean;
  user_id: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface FavoriteFoodPreviousValuesPromise
  extends Promise<FavoriteFoodPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  food_id: () => Promise<String>;
  custom: () => Promise<Boolean>;
  user_id: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface FavoriteFoodPreviousValuesSubscription
  extends Promise<AsyncIterator<FavoriteFoodPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  food_id: () => Promise<AsyncIterator<String>>;
  custom: () => Promise<AsyncIterator<Boolean>>;
  user_id: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface IngredientListSubscriptionPayload {
  mutation: MutationType;
  node: IngredientList;
  updatedFields: String[];
  previousValues: IngredientListPreviousValues;
}

export interface IngredientListSubscriptionPayloadPromise
  extends Promise<IngredientListSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IngredientListPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IngredientListPreviousValuesPromise>() => T;
}

export interface IngredientListSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IngredientListSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IngredientListSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IngredientListPreviousValuesSubscription>() => T;
}

export interface IngredientListPreviousValues {
  id: ID_Output;
  user_id: String;
  recipe_id: String;
  ingredient_id: String;
  custom: Boolean;
  amount: Float;
  unit: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface IngredientListPreviousValuesPromise
  extends Promise<IngredientListPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user_id: () => Promise<String>;
  recipe_id: () => Promise<String>;
  ingredient_id: () => Promise<String>;
  custom: () => Promise<Boolean>;
  amount: () => Promise<Float>;
  unit: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface IngredientListPreviousValuesSubscription
  extends Promise<AsyncIterator<IngredientListPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user_id: () => Promise<AsyncIterator<String>>;
  recipe_id: () => Promise<AsyncIterator<String>>;
  ingredient_id: () => Promise<AsyncIterator<String>>;
  custom: () => Promise<AsyncIterator<Boolean>>;
  amount: () => Promise<AsyncIterator<Float>>;
  unit: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  user_id: String;
  viewCount?: Int;
  likeCount?: Int;
  title: String;
  body: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user_id: () => Promise<String>;
  viewCount: () => Promise<Int>;
  likeCount: () => Promise<Int>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user_id: () => Promise<AsyncIterator<String>>;
  viewCount: () => Promise<AsyncIterator<Int>>;
  likeCount: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProfileSubscriptionPayload {
  mutation: MutationType;
  node: Profile;
  updatedFields: String[];
  previousValues: ProfilePreviousValues;
}

export interface ProfileSubscriptionPayloadPromise
  extends Promise<ProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProfilePreviousValuesPromise>() => T;
}

export interface ProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProfilePreviousValuesSubscription>() => T;
}

export interface ProfilePreviousValues {
  id: ID_Output;
  user_id: String;
  age: Int;
  weight: Int;
  height: Int;
  gender?: Boolean;
  goal_weight?: Int;
  activity_level?: Int;
  diet?: String;
  fat?: Int;
  carbs?: Int;
  protein?: Int;
  fiber?: Int;
  calories?: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ProfilePreviousValuesPromise
  extends Promise<ProfilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user_id: () => Promise<String>;
  age: () => Promise<Int>;
  weight: () => Promise<Int>;
  height: () => Promise<Int>;
  gender: () => Promise<Boolean>;
  goal_weight: () => Promise<Int>;
  activity_level: () => Promise<Int>;
  diet: () => Promise<String>;
  fat: () => Promise<Int>;
  carbs: () => Promise<Int>;
  protein: () => Promise<Int>;
  fiber: () => Promise<Int>;
  calories: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<ProfilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user_id: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  weight: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Boolean>>;
  goal_weight: () => Promise<AsyncIterator<Int>>;
  activity_level: () => Promise<AsyncIterator<Int>>;
  diet: () => Promise<AsyncIterator<String>>;
  fat: () => Promise<AsyncIterator<Int>>;
  carbs: () => Promise<AsyncIterator<Int>>;
  protein: () => Promise<AsyncIterator<Int>>;
  fiber: () => Promise<AsyncIterator<Int>>;
  calories: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WeightLogSubscriptionPayload {
  mutation: MutationType;
  node: WeightLog;
  updatedFields: String[];
  previousValues: WeightLogPreviousValues;
}

export interface WeightLogSubscriptionPayloadPromise
  extends Promise<WeightLogSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WeightLogPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WeightLogPreviousValuesPromise>() => T;
}

export interface WeightLogSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WeightLogSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WeightLogSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WeightLogPreviousValuesSubscription>() => T;
}

export interface WeightLogPreviousValues {
  id: ID_Output;
  date: String;
  user_id: String;
  current_weight: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface WeightLogPreviousValuesPromise
  extends Promise<WeightLogPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<String>;
  user_id: () => Promise<String>;
  current_weight: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface WeightLogPreviousValuesSubscription
  extends Promise<AsyncIterator<WeightLogPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<String>>;
  user_id: () => Promise<AsyncIterator<String>>;
  current_weight: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Profile",
    embedded: false
  },
  {
    name: "DailyRecord",
    embedded: false
  },
  {
    name: "CustomRecipe",
    embedded: false
  },
  {
    name: "CustomIngredient",
    embedded: false
  },
  {
    name: "IngredientList",
    embedded: false
  },
  {
    name: "FavoriteFood",
    embedded: false
  },
  {
    name: "WeightLog",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
